
HelloWorld.elf:     file format elf32-littlenios2
HelloWorld.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001d68 memsz 0x00001d68 flags r-x
    LOAD off    0x00002d88 vaddr 0x00011d88 paddr 0x00011d8c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00002d90 vaddr 0x00011d90 paddr 0x00011d90 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00002d8c  2**0
                  CONTENTS
  2 .text         00001c3c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000012c  00011c5c  00011c5c  00002c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00011d88  00011d8c  00002d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00011d90  00011d90  00002d90  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00011d9c  00011d9c  00002d8c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000328  00000000  00000000  00002db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000027a2  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001349  00000000  00000000  0000587a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001565  00000000  00000000  00006bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000484  00000000  00000000  00008128  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000dc8  00000000  00000000  000085ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003252  00000000  00000000  00009374  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000c5c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005b8  00000000  00000000  0000c608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000dcf1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000dcf4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000dcf7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000dcf8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000dcf9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000dcfd  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000dd01  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000dd05  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0000dd0e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000dd17  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0000dd20  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000041  00000000  00000000  0000dd2d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00068f25  00000000  00000000  0000dd6e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00011c5c l    d  .rodata	00000000 .rodata
00011d88 l    d  .rwdata	00000000 .rwdata
00011d90 l    d  .bss	00000000 .bss
00011d9c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloWorld_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0001177c g     F .text	0000002c alt_main
00011d8c g       *ABS*	00000000 __flash_rwdata_start
00010ab0 g     F .text	00000070 .hidden __fixsfsi
00011960 g     F .text	00000038 alt_putstr
00011d88 g     O .rwdata	00000004 jtag_uart
00011a84 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011d94 g     O .bss	00000004 alt_argv
00019d88 g       *ABS*	00000000 _gp
00011998 g     F .text	00000004 usleep
000105cc g     F .text	000004e4 .hidden __subsf3
0001138c g     F .text	000000dc .hidden __floatsidf
00011ba0 g     F .text	00000064 .hidden __udivsi3
00011d9c g       *ABS*	00000000 __bss_end
0001005c g     F .text	00000068 calc_delay
00011a7c g     F .text	00000004 alt_dcache_flush_all
00011d8c g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011d88 g       *ABS*	00000000 __ram_rodata_end
00011c04 g     F .text	00000058 .hidden __umodsi3
00011d9c g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011610 g     F .text	00000064 .hidden __clzsi2
000119c0 g     F .text	00000034 altera_avalon_jtag_uart_write
000117a8 g     F .text	00000170 alt_printf
00010020 g     F .text	0000003c _start
000119bc g     F .text	00000004 alt_sys_init
00011674 g     F .text	00000028 .hidden __mulsi3
00011d88 g       *ABS*	00000000 __ram_rwdata_start
00011c5c g       *ABS*	00000000 __ram_rodata_start
000119f4 g     F .text	00000088 alt_busy_sleep
00011d9c g       *ABS*	00000000 __alt_stack_base
00010b20 g     F .text	0000086c .hidden __muldf3
00011d90 g       *ABS*	00000000 __bss_start
000100c4 g     F .text	000000d8 main
00011d90 g     O .bss	00000004 alt_envp
00011468 g     F .text	000001a8 .hidden __truncdfsf2
00011aa8 g     F .text	00000084 .hidden __divsi3
0001019c g     F .text	00000430 .hidden __mulsf3
00011c5c g       *ABS*	00000000 __flash_rodata_start
0001199c g     F .text	00000020 alt_irq_init
00011c88 g     O .rodata	00000100 .hidden __clz_tab
00011d98 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011d8c g       *ABS*	00000000 _edata
00011d9c g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00011b2c g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00011a8c g     F .text	0000001c strlen
00011918 g     F .text	00000048 alt_putchar
00011a80 g     F .text	00000004 alt_icache_flush_all
0001169c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a76214 	ori	gp,gp,40328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10876414 	ori	r2,r2,7568

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c76714 	ori	r3,r3,7580

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	001169c0 	call	1169c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	001177c0 	call	1177c <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <calc_delay>:

int calc_delay (){
    int switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    float switch_ratio = switch_datain / 1024.0; // Normalize switch data to range [0, 1]
    int delay = (int)(1000000 * (1 - switch_ratio)); // Adjust delay inversely proportional to switch data
    return delay;
   1005c:	008000b4 	movhi	r2,2
#include <sys/alt_stdio.h>
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"

int calc_delay (){
   10060:	deffff04 	addi	sp,sp,-4
    int switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    float switch_ratio = switch_datain / 1024.0; // Normalize switch data to range [0, 1]
    int delay = (int)(1000000 * (1 - switch_ratio)); // Adjust delay inversely proportional to switch data
    return delay;
   10064:	10841c04 	addi	r2,r2,4208
#include <sys/alt_stdio.h>
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"

int calc_delay (){
   10068:	dfc00015 	stw	ra,0(sp)
    int switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    float switch_ratio = switch_datain / 1024.0; // Normalize switch data to range [0, 1]
    int delay = (int)(1000000 * (1 - switch_ratio)); // Adjust delay inversely proportional to switch data
    return delay;
   1006c:	11000037 	ldwio	r4,0(r2)
   10070:	001138c0 	call	1138c <__floatsidf>
   10074:	000d883a 	mov	r6,zero
   10078:	01cfd434 	movhi	r7,16208
   1007c:	1009883a 	mov	r4,r2
   10080:	180b883a 	mov	r5,r3
   10084:	0010b200 	call	10b20 <__muldf3>
   10088:	180b883a 	mov	r5,r3
   1008c:	1009883a 	mov	r4,r2
   10090:	00114680 	call	11468 <__truncdfsf2>
   10094:	100b883a 	mov	r5,r2
   10098:	010fe034 	movhi	r4,16256
   1009c:	00105cc0 	call	105cc <__subsf3>
   100a0:	01525d34 	movhi	r5,18804
   100a4:	29490004 	addi	r5,r5,9216
   100a8:	1009883a 	mov	r4,r2
   100ac:	001019c0 	call	1019c <__mulsf3>
   100b0:	1009883a 	mov	r4,r2
   100b4:	0010ab00 	call	10ab0 <__fixsfsi>
}
   100b8:	dfc00017 	ldw	ra,0(sp)
   100bc:	dec00104 	addi	sp,sp,4
   100c0:	f800283a 	ret

000100c4 <main>:
int main()
{
   100c4:	defff904 	addi	sp,sp,-28
    int button_datain;
    alt_putstr("Hello from Nios II!\n");
   100c8:	01000074 	movhi	r4,1
    float switch_ratio = switch_datain / 1024.0; // Normalize switch data to range [0, 1]
    int delay = (int)(1000000 * (1 - switch_ratio)); // Adjust delay inversely proportional to switch data
    return delay;
}
int main()
{
   100cc:	dd000415 	stw	r20,16(sp)
   100d0:	dcc00315 	stw	r19,12(sp)
    int button_datain;
    alt_putstr("Hello from Nios II!\n");
   100d4:	21071704 	addi	r4,r4,7260

    while (1)
    {
    
        button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   100d8:	04c000b4 	movhi	r19,2
            currlight = currlight * 2;
            delay=calc_delay();
            alt_putstr("Switch Data: ");
            alt_printf("%d\n", delay);
            usleep(delay); // Delay based on switch data
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
   100dc:	050000b4 	movhi	r20,2
    float switch_ratio = switch_datain / 1024.0; // Normalize switch data to range [0, 1]
    int delay = (int)(1000000 * (1 - switch_ratio)); // Adjust delay inversely proportional to switch data
    return delay;
}
int main()
{
   100e0:	dfc00615 	stw	ra,24(sp)
   100e4:	dd400515 	stw	r21,20(sp)
   100e8:	dc800215 	stw	r18,8(sp)
   100ec:	dc400115 	stw	r17,4(sp)
   100f0:	dc000015 	stw	r16,0(sp)
    alt_putstr("Hello from Nios II!\n");

    while (1)
    {
    
        button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   100f4:	9cc42004 	addi	r19,r19,4224
    return delay;
}
int main()
{
    int button_datain;
    alt_putstr("Hello from Nios II!\n");
   100f8:	00119600 	call	11960 <alt_putstr>
            currlight = currlight * 2;
            delay=calc_delay();
            alt_putstr("Switch Data: ");
            alt_printf("%d\n", delay);
            usleep(delay); // Delay based on switch data
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
   100fc:	a5041804 	addi	r20,r20,4192
    alt_putstr("Hello from Nios II!\n");

    while (1)
    {
    
        button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10100:	98800037 	ldwio	r2,0(r19)
   10104:	04400244 	movi	r17,9

        int currlight = 1;
   10108:	04000044 	movi	r16,1


        for (int i = 0; i < 9; i++)
        {
            currlight = currlight * 2;
            delay=calc_delay();
   1010c:	001005c0 	call	1005c <calc_delay>
            alt_putstr("Switch Data: ");
   10110:	01000074 	movhi	r4,1
   10114:	21071d04 	addi	r4,r4,7284


        for (int i = 0; i < 9; i++)
        {
            currlight = currlight * 2;
            delay=calc_delay();
   10118:	1025883a 	mov	r18,r2
            alt_putstr("Switch Data: ");
   1011c:	00119600 	call	11960 <alt_putstr>
            alt_printf("%d\n", delay);
   10120:	01000074 	movhi	r4,1
   10124:	900b883a 	mov	r5,r18
   10128:	21072104 	addi	r4,r4,7300
   1012c:	00117a80 	call	117a8 <alt_printf>
            usleep(delay); // Delay based on switch data
   10130:	9009883a 	mov	r4,r18
        // Calculate delay based on switch data


        for (int i = 0; i < 9; i++)
        {
            currlight = currlight * 2;
   10134:	8421883a 	add	r16,r16,r16
            delay=calc_delay();
            alt_putstr("Switch Data: ");
            alt_printf("%d\n", delay);
            usleep(delay); // Delay based on switch data
   10138:	00119980 	call	11998 <usleep>
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
   1013c:	a4000035 	stwio	r16,0(r20)
   10140:	054000b4 	movhi	r21,2
   10144:	8c7fffc4 	addi	r17,r17,-1
   10148:	ad441804 	addi	r21,r21,4192
        int currlight = 1;
        int delay;
        // Calculate delay based on switch data


        for (int i = 0; i < 9; i++)
   1014c:	883fef1e 	bne	r17,zero,1010c <__alt_data_end+0xffff010c>
   10150:	04400244 	movi	r17,9
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
        }

        for (int j = 10; j > 1; j--)
        {
            currlight = currlight / 2;
   10154:	8004d7fa 	srli	r2,r16,31
   10158:	1421883a 	add	r16,r2,r16
            delay=calc_delay();
   1015c:	001005c0 	call	1005c <calc_delay>
            alt_putstr("Switch Data: ");
   10160:	01000074 	movhi	r4,1
   10164:	21071d04 	addi	r4,r4,7284
        }

        for (int j = 10; j > 1; j--)
        {
            currlight = currlight / 2;
            delay=calc_delay();
   10168:	1025883a 	mov	r18,r2
            alt_putstr("Switch Data: ");
   1016c:	00119600 	call	11960 <alt_putstr>
            alt_printf("%d\n", delay);
   10170:	01000074 	movhi	r4,1
   10174:	900b883a 	mov	r5,r18
   10178:	21072104 	addi	r4,r4,7300
   1017c:	00117a80 	call	117a8 <alt_printf>
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
        }

        for (int j = 10; j > 1; j--)
        {
            currlight = currlight / 2;
   10180:	8021d07a 	srai	r16,r16,1
            delay=calc_delay();
            alt_putstr("Switch Data: ");
            alt_printf("%d\n", delay);
            usleep(delay); // Delay based on switch data
   10184:	9009883a 	mov	r4,r18
   10188:	00119980 	call	11998 <usleep>
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
   1018c:	ac000035 	stwio	r16,0(r21)
   10190:	8c7fffc4 	addi	r17,r17,-1
            alt_printf("%d\n", delay);
            usleep(delay); // Delay based on switch data
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
        }

        for (int j = 10; j > 1; j--)
   10194:	883fef1e 	bne	r17,zero,10154 <__alt_data_end+0xffff0154>
   10198:	003fd906 	br	10100 <__alt_data_end+0xffff0100>

0001019c <__mulsf3>:
   1019c:	defff504 	addi	sp,sp,-44
   101a0:	dc000115 	stw	r16,4(sp)
   101a4:	2020d5fa 	srli	r16,r4,23
   101a8:	dd400615 	stw	r21,24(sp)
   101ac:	202ad7fa 	srli	r21,r4,31
   101b0:	dc800315 	stw	r18,12(sp)
   101b4:	04802034 	movhi	r18,128
   101b8:	df000915 	stw	fp,36(sp)
   101bc:	dd000515 	stw	r20,20(sp)
   101c0:	94bfffc4 	addi	r18,r18,-1
   101c4:	dfc00a15 	stw	ra,40(sp)
   101c8:	ddc00815 	stw	r23,32(sp)
   101cc:	dd800715 	stw	r22,28(sp)
   101d0:	dcc00415 	stw	r19,16(sp)
   101d4:	dc400215 	stw	r17,8(sp)
   101d8:	84003fcc 	andi	r16,r16,255
   101dc:	9124703a 	and	r18,r18,r4
   101e0:	a829883a 	mov	r20,r21
   101e4:	af003fcc 	andi	fp,r21,255
   101e8:	80005426 	beq	r16,zero,1033c <__mulsf3+0x1a0>
   101ec:	00803fc4 	movi	r2,255
   101f0:	80802f26 	beq	r16,r2,102b0 <__mulsf3+0x114>
   101f4:	91002034 	orhi	r4,r18,128
   101f8:	202490fa 	slli	r18,r4,3
   101fc:	843fe044 	addi	r16,r16,-127
   10200:	0023883a 	mov	r17,zero
   10204:	002f883a 	mov	r23,zero
   10208:	2804d5fa 	srli	r2,r5,23
   1020c:	282cd7fa 	srli	r22,r5,31
   10210:	01002034 	movhi	r4,128
   10214:	213fffc4 	addi	r4,r4,-1
   10218:	10803fcc 	andi	r2,r2,255
   1021c:	2166703a 	and	r19,r4,r5
   10220:	b1803fcc 	andi	r6,r22,255
   10224:	10004c26 	beq	r2,zero,10358 <__mulsf3+0x1bc>
   10228:	00c03fc4 	movi	r3,255
   1022c:	10c04726 	beq	r2,r3,1034c <__mulsf3+0x1b0>
   10230:	99002034 	orhi	r4,r19,128
   10234:	202690fa 	slli	r19,r4,3
   10238:	10bfe044 	addi	r2,r2,-127
   1023c:	0007883a 	mov	r3,zero
   10240:	80a1883a 	add	r16,r16,r2
   10244:	010003c4 	movi	r4,15
   10248:	1c44b03a 	or	r2,r3,r17
   1024c:	b56af03a 	xor	r21,r22,r21
   10250:	81c00044 	addi	r7,r16,1
   10254:	20806b36 	bltu	r4,r2,10404 <__mulsf3+0x268>
   10258:	100490ba 	slli	r2,r2,2
   1025c:	01000074 	movhi	r4,1
   10260:	21009c04 	addi	r4,r4,624
   10264:	1105883a 	add	r2,r2,r4
   10268:	10800017 	ldw	r2,0(r2)
   1026c:	1000683a 	jmp	r2
   10270:	00010404 	movi	zero,1040
   10274:	000102c4 	movi	zero,1035
   10278:	000102c4 	movi	zero,1035
   1027c:	000102c0 	call	102c <__alt_mem_onchip_memory-0xefd4>
   10280:	000103e8 	cmpgeui	zero,zero,1039
   10284:	000103e8 	cmpgeui	zero,zero,1039
   10288:	000103d4 	movui	zero,1039
   1028c:	000102c0 	call	102c <__alt_mem_onchip_memory-0xefd4>
   10290:	000103e8 	cmpgeui	zero,zero,1039
   10294:	000103d4 	movui	zero,1039
   10298:	000103e8 	cmpgeui	zero,zero,1039
   1029c:	000102c0 	call	102c <__alt_mem_onchip_memory-0xefd4>
   102a0:	000103f4 	movhi	zero,1039
   102a4:	000103f4 	movhi	zero,1039
   102a8:	000103f4 	movhi	zero,1039
   102ac:	00010504 	movi	zero,1044
   102b0:	90003b1e 	bne	r18,zero,103a0 <__mulsf3+0x204>
   102b4:	04400204 	movi	r17,8
   102b8:	05c00084 	movi	r23,2
   102bc:	003fd206 	br	10208 <__alt_data_end+0xffff0208>
   102c0:	302b883a 	mov	r21,r6
   102c4:	00800084 	movi	r2,2
   102c8:	18802626 	beq	r3,r2,10364 <__mulsf3+0x1c8>
   102cc:	008000c4 	movi	r2,3
   102d0:	1880b826 	beq	r3,r2,105b4 <__mulsf3+0x418>
   102d4:	00800044 	movi	r2,1
   102d8:	1880af1e 	bne	r3,r2,10598 <__mulsf3+0x3fc>
   102dc:	a829883a 	mov	r20,r21
   102e0:	0007883a 	mov	r3,zero
   102e4:	0009883a 	mov	r4,zero
   102e8:	18803fcc 	andi	r2,r3,255
   102ec:	100695fa 	slli	r3,r2,23
   102f0:	a0803fcc 	andi	r2,r20,255
   102f4:	100a97fa 	slli	r5,r2,31
   102f8:	00802034 	movhi	r2,128
   102fc:	10bfffc4 	addi	r2,r2,-1
   10300:	2084703a 	and	r2,r4,r2
   10304:	10c4b03a 	or	r2,r2,r3
   10308:	1144b03a 	or	r2,r2,r5
   1030c:	dfc00a17 	ldw	ra,40(sp)
   10310:	df000917 	ldw	fp,36(sp)
   10314:	ddc00817 	ldw	r23,32(sp)
   10318:	dd800717 	ldw	r22,28(sp)
   1031c:	dd400617 	ldw	r21,24(sp)
   10320:	dd000517 	ldw	r20,20(sp)
   10324:	dcc00417 	ldw	r19,16(sp)
   10328:	dc800317 	ldw	r18,12(sp)
   1032c:	dc400217 	ldw	r17,8(sp)
   10330:	dc000117 	ldw	r16,4(sp)
   10334:	dec00b04 	addi	sp,sp,44
   10338:	f800283a 	ret
   1033c:	90000d1e 	bne	r18,zero,10374 <__mulsf3+0x1d8>
   10340:	04400104 	movi	r17,4
   10344:	05c00044 	movi	r23,1
   10348:	003faf06 	br	10208 <__alt_data_end+0xffff0208>
   1034c:	9806c03a 	cmpne	r3,r19,zero
   10350:	18c00084 	addi	r3,r3,2
   10354:	003fba06 	br	10240 <__alt_data_end+0xffff0240>
   10358:	9800141e 	bne	r19,zero,103ac <__mulsf3+0x210>
   1035c:	00c00044 	movi	r3,1
   10360:	003fb706 	br	10240 <__alt_data_end+0xffff0240>
   10364:	a829883a 	mov	r20,r21
   10368:	00ffffc4 	movi	r3,-1
   1036c:	0009883a 	mov	r4,zero
   10370:	003fdd06 	br	102e8 <__alt_data_end+0xffff02e8>
   10374:	9009883a 	mov	r4,r18
   10378:	d9400015 	stw	r5,0(sp)
   1037c:	00116100 	call	11610 <__clzsi2>
   10380:	10fffec4 	addi	r3,r2,-5
   10384:	10801d84 	addi	r2,r2,118
   10388:	90e4983a 	sll	r18,r18,r3
   1038c:	00a1c83a 	sub	r16,zero,r2
   10390:	0023883a 	mov	r17,zero
   10394:	002f883a 	mov	r23,zero
   10398:	d9400017 	ldw	r5,0(sp)
   1039c:	003f9a06 	br	10208 <__alt_data_end+0xffff0208>
   103a0:	04400304 	movi	r17,12
   103a4:	05c000c4 	movi	r23,3
   103a8:	003f9706 	br	10208 <__alt_data_end+0xffff0208>
   103ac:	9809883a 	mov	r4,r19
   103b0:	d9800015 	stw	r6,0(sp)
   103b4:	00116100 	call	11610 <__clzsi2>
   103b8:	10fffec4 	addi	r3,r2,-5
   103bc:	10801d84 	addi	r2,r2,118
   103c0:	98e6983a 	sll	r19,r19,r3
   103c4:	0085c83a 	sub	r2,zero,r2
   103c8:	0007883a 	mov	r3,zero
   103cc:	d9800017 	ldw	r6,0(sp)
   103d0:	003f9b06 	br	10240 <__alt_data_end+0xffff0240>
   103d4:	01002034 	movhi	r4,128
   103d8:	0029883a 	mov	r20,zero
   103dc:	213fffc4 	addi	r4,r4,-1
   103e0:	00ffffc4 	movi	r3,-1
   103e4:	003fc006 	br	102e8 <__alt_data_end+0xffff02e8>
   103e8:	9027883a 	mov	r19,r18
   103ec:	b807883a 	mov	r3,r23
   103f0:	003fb406 	br	102c4 <__alt_data_end+0xffff02c4>
   103f4:	9027883a 	mov	r19,r18
   103f8:	e02b883a 	mov	r21,fp
   103fc:	b807883a 	mov	r3,r23
   10400:	003fb006 	br	102c4 <__alt_data_end+0xffff02c4>
   10404:	9028d43a 	srli	r20,r18,16
   10408:	982cd43a 	srli	r22,r19,16
   1040c:	94bfffcc 	andi	r18,r18,65535
   10410:	9cffffcc 	andi	r19,r19,65535
   10414:	980b883a 	mov	r5,r19
   10418:	9009883a 	mov	r4,r18
   1041c:	d9c00015 	stw	r7,0(sp)
   10420:	00116740 	call	11674 <__mulsi3>
   10424:	a00b883a 	mov	r5,r20
   10428:	9809883a 	mov	r4,r19
   1042c:	1023883a 	mov	r17,r2
   10430:	00116740 	call	11674 <__mulsi3>
   10434:	a009883a 	mov	r4,r20
   10438:	b00b883a 	mov	r5,r22
   1043c:	1027883a 	mov	r19,r2
   10440:	00116740 	call	11674 <__mulsi3>
   10444:	b00b883a 	mov	r5,r22
   10448:	9009883a 	mov	r4,r18
   1044c:	1029883a 	mov	r20,r2
   10450:	00116740 	call	11674 <__mulsi3>
   10454:	8806d43a 	srli	r3,r17,16
   10458:	14c5883a 	add	r2,r2,r19
   1045c:	d9c00017 	ldw	r7,0(sp)
   10460:	1885883a 	add	r2,r3,r2
   10464:	14c0022e 	bgeu	r2,r19,10470 <__mulsf3+0x2d4>
   10468:	00c00074 	movhi	r3,1
   1046c:	a0e9883a 	add	r20,r20,r3
   10470:	1026943a 	slli	r19,r2,16
   10474:	8c7fffcc 	andi	r17,r17,65535
   10478:	1004d43a 	srli	r2,r2,16
   1047c:	9c63883a 	add	r17,r19,r17
   10480:	882691ba 	slli	r19,r17,6
   10484:	1505883a 	add	r2,r2,r20
   10488:	8822d6ba 	srli	r17,r17,26
   1048c:	100891ba 	slli	r4,r2,6
   10490:	9826c03a 	cmpne	r19,r19,zero
   10494:	9c62b03a 	or	r17,r19,r17
   10498:	8926b03a 	or	r19,r17,r4
   1049c:	9882002c 	andhi	r2,r19,2048
   104a0:	10000426 	beq	r2,zero,104b4 <__mulsf3+0x318>
   104a4:	9804d07a 	srli	r2,r19,1
   104a8:	9900004c 	andi	r4,r19,1
   104ac:	3821883a 	mov	r16,r7
   104b0:	1126b03a 	or	r19,r2,r4
   104b4:	80c01fc4 	addi	r3,r16,127
   104b8:	00c0210e 	bge	zero,r3,10540 <__mulsf3+0x3a4>
   104bc:	988001cc 	andi	r2,r19,7
   104c0:	10000426 	beq	r2,zero,104d4 <__mulsf3+0x338>
   104c4:	988003cc 	andi	r2,r19,15
   104c8:	01000104 	movi	r4,4
   104cc:	11000126 	beq	r2,r4,104d4 <__mulsf3+0x338>
   104d0:	9927883a 	add	r19,r19,r4
   104d4:	9882002c 	andhi	r2,r19,2048
   104d8:	10000426 	beq	r2,zero,104ec <__mulsf3+0x350>
   104dc:	00be0034 	movhi	r2,63488
   104e0:	10bfffc4 	addi	r2,r2,-1
   104e4:	80c02004 	addi	r3,r16,128
   104e8:	98a6703a 	and	r19,r19,r2
   104ec:	00803f84 	movi	r2,254
   104f0:	10ff9c16 	blt	r2,r3,10364 <__alt_data_end+0xffff0364>
   104f4:	980891ba 	slli	r4,r19,6
   104f8:	a829883a 	mov	r20,r21
   104fc:	2008d27a 	srli	r4,r4,9
   10500:	003f7906 	br	102e8 <__alt_data_end+0xffff02e8>
   10504:	9080102c 	andhi	r2,r18,64
   10508:	10000826 	beq	r2,zero,1052c <__mulsf3+0x390>
   1050c:	9880102c 	andhi	r2,r19,64
   10510:	1000061e 	bne	r2,zero,1052c <__mulsf3+0x390>
   10514:	00802034 	movhi	r2,128
   10518:	99001034 	orhi	r4,r19,64
   1051c:	10bfffc4 	addi	r2,r2,-1
   10520:	b029883a 	mov	r20,r22
   10524:	2088703a 	and	r4,r4,r2
   10528:	003fad06 	br	103e0 <__alt_data_end+0xffff03e0>
   1052c:	00802034 	movhi	r2,128
   10530:	91001034 	orhi	r4,r18,64
   10534:	10bfffc4 	addi	r2,r2,-1
   10538:	2088703a 	and	r4,r4,r2
   1053c:	003fa806 	br	103e0 <__alt_data_end+0xffff03e0>
   10540:	00800044 	movi	r2,1
   10544:	10c7c83a 	sub	r3,r2,r3
   10548:	008006c4 	movi	r2,27
   1054c:	10ff6316 	blt	r2,r3,102dc <__alt_data_end+0xffff02dc>
   10550:	00800804 	movi	r2,32
   10554:	10c5c83a 	sub	r2,r2,r3
   10558:	9884983a 	sll	r2,r19,r2
   1055c:	98c6d83a 	srl	r3,r19,r3
   10560:	1004c03a 	cmpne	r2,r2,zero
   10564:	1884b03a 	or	r2,r3,r2
   10568:	10c001cc 	andi	r3,r2,7
   1056c:	18000426 	beq	r3,zero,10580 <__mulsf3+0x3e4>
   10570:	10c003cc 	andi	r3,r2,15
   10574:	01000104 	movi	r4,4
   10578:	19000126 	beq	r3,r4,10580 <__mulsf3+0x3e4>
   1057c:	1105883a 	add	r2,r2,r4
   10580:	10c1002c 	andhi	r3,r2,1024
   10584:	18000626 	beq	r3,zero,105a0 <__mulsf3+0x404>
   10588:	a829883a 	mov	r20,r21
   1058c:	00c00044 	movi	r3,1
   10590:	0009883a 	mov	r4,zero
   10594:	003f5406 	br	102e8 <__alt_data_end+0xffff02e8>
   10598:	3821883a 	mov	r16,r7
   1059c:	003fc506 	br	104b4 <__alt_data_end+0xffff04b4>
   105a0:	100491ba 	slli	r2,r2,6
   105a4:	a829883a 	mov	r20,r21
   105a8:	0007883a 	mov	r3,zero
   105ac:	1008d27a 	srli	r4,r2,9
   105b0:	003f4d06 	br	102e8 <__alt_data_end+0xffff02e8>
   105b4:	00802034 	movhi	r2,128
   105b8:	99001034 	orhi	r4,r19,64
   105bc:	10bfffc4 	addi	r2,r2,-1
   105c0:	a829883a 	mov	r20,r21
   105c4:	2088703a 	and	r4,r4,r2
   105c8:	003f8506 	br	103e0 <__alt_data_end+0xffff03e0>

000105cc <__subsf3>:
   105cc:	defffc04 	addi	sp,sp,-16
   105d0:	280cd5fa 	srli	r6,r5,23
   105d4:	dc000015 	stw	r16,0(sp)
   105d8:	01c02034 	movhi	r7,128
   105dc:	2020d5fa 	srli	r16,r4,23
   105e0:	39ffffc4 	addi	r7,r7,-1
   105e4:	3906703a 	and	r3,r7,r4
   105e8:	dc400115 	stw	r17,4(sp)
   105ec:	394e703a 	and	r7,r7,r5
   105f0:	2022d7fa 	srli	r17,r4,31
   105f4:	dfc00315 	stw	ra,12(sp)
   105f8:	dc800215 	stw	r18,8(sp)
   105fc:	31803fcc 	andi	r6,r6,255
   10600:	01003fc4 	movi	r4,255
   10604:	84003fcc 	andi	r16,r16,255
   10608:	180690fa 	slli	r3,r3,3
   1060c:	2804d7fa 	srli	r2,r5,31
   10610:	380e90fa 	slli	r7,r7,3
   10614:	31006d26 	beq	r6,r4,107cc <__subsf3+0x200>
   10618:	1080005c 	xori	r2,r2,1
   1061c:	8189c83a 	sub	r4,r16,r6
   10620:	14404f26 	beq	r2,r17,10760 <__subsf3+0x194>
   10624:	0100770e 	bge	zero,r4,10804 <__subsf3+0x238>
   10628:	30001e1e 	bne	r6,zero,106a4 <__subsf3+0xd8>
   1062c:	38006a1e 	bne	r7,zero,107d8 <__subsf3+0x20c>
   10630:	188001cc 	andi	r2,r3,7
   10634:	10000426 	beq	r2,zero,10648 <__subsf3+0x7c>
   10638:	188003cc 	andi	r2,r3,15
   1063c:	01000104 	movi	r4,4
   10640:	11000126 	beq	r2,r4,10648 <__subsf3+0x7c>
   10644:	1907883a 	add	r3,r3,r4
   10648:	1881002c 	andhi	r2,r3,1024
   1064c:	10003926 	beq	r2,zero,10734 <__subsf3+0x168>
   10650:	84000044 	addi	r16,r16,1
   10654:	00803fc4 	movi	r2,255
   10658:	80807526 	beq	r16,r2,10830 <__subsf3+0x264>
   1065c:	180691ba 	slli	r3,r3,6
   10660:	8880004c 	andi	r2,r17,1
   10664:	180ad27a 	srli	r5,r3,9
   10668:	84003fcc 	andi	r16,r16,255
   1066c:	800695fa 	slli	r3,r16,23
   10670:	10803fcc 	andi	r2,r2,255
   10674:	01002034 	movhi	r4,128
   10678:	213fffc4 	addi	r4,r4,-1
   1067c:	100497fa 	slli	r2,r2,31
   10680:	2920703a 	and	r16,r5,r4
   10684:	80e0b03a 	or	r16,r16,r3
   10688:	8084b03a 	or	r2,r16,r2
   1068c:	dfc00317 	ldw	ra,12(sp)
   10690:	dc800217 	ldw	r18,8(sp)
   10694:	dc400117 	ldw	r17,4(sp)
   10698:	dc000017 	ldw	r16,0(sp)
   1069c:	dec00404 	addi	sp,sp,16
   106a0:	f800283a 	ret
   106a4:	00803fc4 	movi	r2,255
   106a8:	80bfe126 	beq	r16,r2,10630 <__alt_data_end+0xffff0630>
   106ac:	39c10034 	orhi	r7,r7,1024
   106b0:	008006c4 	movi	r2,27
   106b4:	11007416 	blt	r2,r4,10888 <__subsf3+0x2bc>
   106b8:	00800804 	movi	r2,32
   106bc:	1105c83a 	sub	r2,r2,r4
   106c0:	3884983a 	sll	r2,r7,r2
   106c4:	390ed83a 	srl	r7,r7,r4
   106c8:	1008c03a 	cmpne	r4,r2,zero
   106cc:	390eb03a 	or	r7,r7,r4
   106d0:	19c7c83a 	sub	r3,r3,r7
   106d4:	1881002c 	andhi	r2,r3,1024
   106d8:	10001426 	beq	r2,zero,1072c <__subsf3+0x160>
   106dc:	04810034 	movhi	r18,1024
   106e0:	94bfffc4 	addi	r18,r18,-1
   106e4:	1ca4703a 	and	r18,r3,r18
   106e8:	9009883a 	mov	r4,r18
   106ec:	00116100 	call	11610 <__clzsi2>
   106f0:	10bffec4 	addi	r2,r2,-5
   106f4:	90a4983a 	sll	r18,r18,r2
   106f8:	14005116 	blt	r2,r16,10840 <__subsf3+0x274>
   106fc:	1405c83a 	sub	r2,r2,r16
   10700:	10c00044 	addi	r3,r2,1
   10704:	00800804 	movi	r2,32
   10708:	10c5c83a 	sub	r2,r2,r3
   1070c:	9084983a 	sll	r2,r18,r2
   10710:	90e4d83a 	srl	r18,r18,r3
   10714:	0021883a 	mov	r16,zero
   10718:	1006c03a 	cmpne	r3,r2,zero
   1071c:	90c6b03a 	or	r3,r18,r3
   10720:	003fc306 	br	10630 <__alt_data_end+0xffff0630>
   10724:	2000e026 	beq	r4,zero,10aa8 <__subsf3+0x4dc>
   10728:	2007883a 	mov	r3,r4
   1072c:	188001cc 	andi	r2,r3,7
   10730:	103fc11e 	bne	r2,zero,10638 <__alt_data_end+0xffff0638>
   10734:	180ad0fa 	srli	r5,r3,3
   10738:	00c03fc4 	movi	r3,255
   1073c:	8880004c 	andi	r2,r17,1
   10740:	80c0031e 	bne	r16,r3,10750 <__subsf3+0x184>
   10744:	28006d26 	beq	r5,zero,108fc <__subsf3+0x330>
   10748:	29401034 	orhi	r5,r5,64
   1074c:	043fffc4 	movi	r16,-1
   10750:	00c02034 	movhi	r3,128
   10754:	18ffffc4 	addi	r3,r3,-1
   10758:	28ca703a 	and	r5,r5,r3
   1075c:	003fc206 	br	10668 <__alt_data_end+0xffff0668>
   10760:	01003c0e 	bge	zero,r4,10854 <__subsf3+0x288>
   10764:	30002126 	beq	r6,zero,107ec <__subsf3+0x220>
   10768:	01403fc4 	movi	r5,255
   1076c:	817fb026 	beq	r16,r5,10630 <__alt_data_end+0xffff0630>
   10770:	39c10034 	orhi	r7,r7,1024
   10774:	014006c4 	movi	r5,27
   10778:	29007416 	blt	r5,r4,1094c <__subsf3+0x380>
   1077c:	01400804 	movi	r5,32
   10780:	290bc83a 	sub	r5,r5,r4
   10784:	394a983a 	sll	r5,r7,r5
   10788:	390ed83a 	srl	r7,r7,r4
   1078c:	2808c03a 	cmpne	r4,r5,zero
   10790:	390eb03a 	or	r7,r7,r4
   10794:	19c7883a 	add	r3,r3,r7
   10798:	1901002c 	andhi	r4,r3,1024
   1079c:	20003826 	beq	r4,zero,10880 <__subsf3+0x2b4>
   107a0:	84000044 	addi	r16,r16,1
   107a4:	01003fc4 	movi	r4,255
   107a8:	81005426 	beq	r16,r4,108fc <__subsf3+0x330>
   107ac:	1023883a 	mov	r17,r2
   107b0:	00bf0034 	movhi	r2,64512
   107b4:	10bfffc4 	addi	r2,r2,-1
   107b8:	1900004c 	andi	r4,r3,1
   107bc:	1886703a 	and	r3,r3,r2
   107c0:	1806d07a 	srli	r3,r3,1
   107c4:	1906b03a 	or	r3,r3,r4
   107c8:	003f9906 	br	10630 <__alt_data_end+0xffff0630>
   107cc:	383f9226 	beq	r7,zero,10618 <__alt_data_end+0xffff0618>
   107d0:	10803fcc 	andi	r2,r2,255
   107d4:	003f9106 	br	1061c <__alt_data_end+0xffff061c>
   107d8:	213fffc4 	addi	r4,r4,-1
   107dc:	203fbc26 	beq	r4,zero,106d0 <__alt_data_end+0xffff06d0>
   107e0:	00803fc4 	movi	r2,255
   107e4:	80bfb21e 	bne	r16,r2,106b0 <__alt_data_end+0xffff06b0>
   107e8:	003f9106 	br	10630 <__alt_data_end+0xffff0630>
   107ec:	383f9026 	beq	r7,zero,10630 <__alt_data_end+0xffff0630>
   107f0:	213fffc4 	addi	r4,r4,-1
   107f4:	203fe726 	beq	r4,zero,10794 <__alt_data_end+0xffff0794>
   107f8:	01403fc4 	movi	r5,255
   107fc:	817fdd1e 	bne	r16,r5,10774 <__alt_data_end+0xffff0774>
   10800:	003f8b06 	br	10630 <__alt_data_end+0xffff0630>
   10804:	2000221e 	bne	r4,zero,10890 <__subsf3+0x2c4>
   10808:	81000044 	addi	r4,r16,1
   1080c:	21003fcc 	andi	r4,r4,255
   10810:	01400044 	movi	r5,1
   10814:	2900470e 	bge	r5,r4,10934 <__subsf3+0x368>
   10818:	19e5c83a 	sub	r18,r3,r7
   1081c:	9141002c 	andhi	r5,r18,1024
   10820:	28002d26 	beq	r5,zero,108d8 <__subsf3+0x30c>
   10824:	38e5c83a 	sub	r18,r7,r3
   10828:	1023883a 	mov	r17,r2
   1082c:	003fae06 	br	106e8 <__alt_data_end+0xffff06e8>
   10830:	8880004c 	andi	r2,r17,1
   10834:	043fffc4 	movi	r16,-1
   10838:	000b883a 	mov	r5,zero
   1083c:	003f8a06 	br	10668 <__alt_data_end+0xffff0668>
   10840:	00ff0034 	movhi	r3,64512
   10844:	18ffffc4 	addi	r3,r3,-1
   10848:	80a1c83a 	sub	r16,r16,r2
   1084c:	90c6703a 	and	r3,r18,r3
   10850:	003f7706 	br	10630 <__alt_data_end+0xffff0630>
   10854:	2000431e 	bne	r4,zero,10964 <__subsf3+0x398>
   10858:	81000044 	addi	r4,r16,1
   1085c:	21803fcc 	andi	r6,r4,255
   10860:	01400044 	movi	r5,1
   10864:	2980280e 	bge	r5,r6,10908 <__subsf3+0x33c>
   10868:	01403fc4 	movi	r5,255
   1086c:	21402326 	beq	r4,r5,108fc <__subsf3+0x330>
   10870:	19c7883a 	add	r3,r3,r7
   10874:	1806d07a 	srli	r3,r3,1
   10878:	2021883a 	mov	r16,r4
   1087c:	003f6c06 	br	10630 <__alt_data_end+0xffff0630>
   10880:	1023883a 	mov	r17,r2
   10884:	003fa906 	br	1072c <__alt_data_end+0xffff072c>
   10888:	01c00044 	movi	r7,1
   1088c:	003f9006 	br	106d0 <__alt_data_end+0xffff06d0>
   10890:	8000151e 	bne	r16,zero,108e8 <__subsf3+0x31c>
   10894:	18002f26 	beq	r3,zero,10954 <__subsf3+0x388>
   10898:	0108303a 	nor	r4,zero,r4
   1089c:	20000a26 	beq	r4,zero,108c8 <__subsf3+0x2fc>
   108a0:	01403fc4 	movi	r5,255
   108a4:	31402b26 	beq	r6,r5,10954 <__subsf3+0x388>
   108a8:	014006c4 	movi	r5,27
   108ac:	29006e16 	blt	r5,r4,10a68 <__subsf3+0x49c>
   108b0:	01400804 	movi	r5,32
   108b4:	290bc83a 	sub	r5,r5,r4
   108b8:	194a983a 	sll	r5,r3,r5
   108bc:	1908d83a 	srl	r4,r3,r4
   108c0:	2806c03a 	cmpne	r3,r5,zero
   108c4:	20c6b03a 	or	r3,r4,r3
   108c8:	38c7c83a 	sub	r3,r7,r3
   108cc:	3021883a 	mov	r16,r6
   108d0:	1023883a 	mov	r17,r2
   108d4:	003f7f06 	br	106d4 <__alt_data_end+0xffff06d4>
   108d8:	903f831e 	bne	r18,zero,106e8 <__alt_data_end+0xffff06e8>
   108dc:	0005883a 	mov	r2,zero
   108e0:	0021883a 	mov	r16,zero
   108e4:	003f9a06 	br	10750 <__alt_data_end+0xffff0750>
   108e8:	01403fc4 	movi	r5,255
   108ec:	31401926 	beq	r6,r5,10954 <__subsf3+0x388>
   108f0:	0109c83a 	sub	r4,zero,r4
   108f4:	18c10034 	orhi	r3,r3,1024
   108f8:	003feb06 	br	108a8 <__alt_data_end+0xffff08a8>
   108fc:	043fffc4 	movi	r16,-1
   10900:	000b883a 	mov	r5,zero
   10904:	003f5806 	br	10668 <__alt_data_end+0xffff0668>
   10908:	8000481e 	bne	r16,zero,10a2c <__subsf3+0x460>
   1090c:	18006226 	beq	r3,zero,10a98 <__subsf3+0x4cc>
   10910:	383f4726 	beq	r7,zero,10630 <__alt_data_end+0xffff0630>
   10914:	19c7883a 	add	r3,r3,r7
   10918:	1881002c 	andhi	r2,r3,1024
   1091c:	103f8326 	beq	r2,zero,1072c <__alt_data_end+0xffff072c>
   10920:	00bf0034 	movhi	r2,64512
   10924:	10bfffc4 	addi	r2,r2,-1
   10928:	2821883a 	mov	r16,r5
   1092c:	1886703a 	and	r3,r3,r2
   10930:	003f3f06 	br	10630 <__alt_data_end+0xffff0630>
   10934:	80001c1e 	bne	r16,zero,109a8 <__subsf3+0x3dc>
   10938:	1800261e 	bne	r3,zero,109d4 <__subsf3+0x408>
   1093c:	38004c26 	beq	r7,zero,10a70 <__subsf3+0x4a4>
   10940:	3807883a 	mov	r3,r7
   10944:	1023883a 	mov	r17,r2
   10948:	003f3906 	br	10630 <__alt_data_end+0xffff0630>
   1094c:	01c00044 	movi	r7,1
   10950:	003f9006 	br	10794 <__alt_data_end+0xffff0794>
   10954:	3807883a 	mov	r3,r7
   10958:	3021883a 	mov	r16,r6
   1095c:	1023883a 	mov	r17,r2
   10960:	003f3306 	br	10630 <__alt_data_end+0xffff0630>
   10964:	8000161e 	bne	r16,zero,109c0 <__subsf3+0x3f4>
   10968:	18002d26 	beq	r3,zero,10a20 <__subsf3+0x454>
   1096c:	0108303a 	nor	r4,zero,r4
   10970:	20000a26 	beq	r4,zero,1099c <__subsf3+0x3d0>
   10974:	01403fc4 	movi	r5,255
   10978:	31402926 	beq	r6,r5,10a20 <__subsf3+0x454>
   1097c:	014006c4 	movi	r5,27
   10980:	29004716 	blt	r5,r4,10aa0 <__subsf3+0x4d4>
   10984:	01400804 	movi	r5,32
   10988:	290bc83a 	sub	r5,r5,r4
   1098c:	194a983a 	sll	r5,r3,r5
   10990:	1908d83a 	srl	r4,r3,r4
   10994:	2806c03a 	cmpne	r3,r5,zero
   10998:	20c6b03a 	or	r3,r4,r3
   1099c:	19c7883a 	add	r3,r3,r7
   109a0:	3021883a 	mov	r16,r6
   109a4:	003f7c06 	br	10798 <__alt_data_end+0xffff0798>
   109a8:	1800111e 	bne	r3,zero,109f0 <__subsf3+0x424>
   109ac:	38003326 	beq	r7,zero,10a7c <__subsf3+0x4b0>
   109b0:	3807883a 	mov	r3,r7
   109b4:	1023883a 	mov	r17,r2
   109b8:	04003fc4 	movi	r16,255
   109bc:	003f1c06 	br	10630 <__alt_data_end+0xffff0630>
   109c0:	01403fc4 	movi	r5,255
   109c4:	31401626 	beq	r6,r5,10a20 <__subsf3+0x454>
   109c8:	0109c83a 	sub	r4,zero,r4
   109cc:	18c10034 	orhi	r3,r3,1024
   109d0:	003fea06 	br	1097c <__alt_data_end+0xffff097c>
   109d4:	383f1626 	beq	r7,zero,10630 <__alt_data_end+0xffff0630>
   109d8:	19c9c83a 	sub	r4,r3,r7
   109dc:	2141002c 	andhi	r5,r4,1024
   109e0:	283f5026 	beq	r5,zero,10724 <__alt_data_end+0xffff0724>
   109e4:	38c7c83a 	sub	r3,r7,r3
   109e8:	1023883a 	mov	r17,r2
   109ec:	003f1006 	br	10630 <__alt_data_end+0xffff0630>
   109f0:	38001b26 	beq	r7,zero,10a60 <__subsf3+0x494>
   109f4:	1806d0fa 	srli	r3,r3,3
   109f8:	1900102c 	andhi	r4,r3,64
   109fc:	20000526 	beq	r4,zero,10a14 <__subsf3+0x448>
   10a00:	380ed0fa 	srli	r7,r7,3
   10a04:	3900102c 	andhi	r4,r7,64
   10a08:	2000021e 	bne	r4,zero,10a14 <__subsf3+0x448>
   10a0c:	3807883a 	mov	r3,r7
   10a10:	1023883a 	mov	r17,r2
   10a14:	180690fa 	slli	r3,r3,3
   10a18:	04003fc4 	movi	r16,255
   10a1c:	003f0406 	br	10630 <__alt_data_end+0xffff0630>
   10a20:	3807883a 	mov	r3,r7
   10a24:	3021883a 	mov	r16,r6
   10a28:	003f0106 	br	10630 <__alt_data_end+0xffff0630>
   10a2c:	18001726 	beq	r3,zero,10a8c <__subsf3+0x4c0>
   10a30:	38000b26 	beq	r7,zero,10a60 <__subsf3+0x494>
   10a34:	1806d0fa 	srli	r3,r3,3
   10a38:	1900102c 	andhi	r4,r3,64
   10a3c:	20000426 	beq	r4,zero,10a50 <__subsf3+0x484>
   10a40:	380ed0fa 	srli	r7,r7,3
   10a44:	3900102c 	andhi	r4,r7,64
   10a48:	2000011e 	bne	r4,zero,10a50 <__subsf3+0x484>
   10a4c:	3807883a 	mov	r3,r7
   10a50:	180690fa 	slli	r3,r3,3
   10a54:	1023883a 	mov	r17,r2
   10a58:	04003fc4 	movi	r16,255
   10a5c:	003ef406 	br	10630 <__alt_data_end+0xffff0630>
   10a60:	04003fc4 	movi	r16,255
   10a64:	003ef206 	br	10630 <__alt_data_end+0xffff0630>
   10a68:	00c00044 	movi	r3,1
   10a6c:	003f9606 	br	108c8 <__alt_data_end+0xffff08c8>
   10a70:	000b883a 	mov	r5,zero
   10a74:	0005883a 	mov	r2,zero
   10a78:	003f3506 	br	10750 <__alt_data_end+0xffff0750>
   10a7c:	01402034 	movhi	r5,128
   10a80:	297fffc4 	addi	r5,r5,-1
   10a84:	0005883a 	mov	r2,zero
   10a88:	003f2f06 	br	10748 <__alt_data_end+0xffff0748>
   10a8c:	3807883a 	mov	r3,r7
   10a90:	04003fc4 	movi	r16,255
   10a94:	003ee606 	br	10630 <__alt_data_end+0xffff0630>
   10a98:	3807883a 	mov	r3,r7
   10a9c:	003ee406 	br	10630 <__alt_data_end+0xffff0630>
   10aa0:	00c00044 	movi	r3,1
   10aa4:	003fbd06 	br	1099c <__alt_data_end+0xffff099c>
   10aa8:	0005883a 	mov	r2,zero
   10aac:	003f2806 	br	10750 <__alt_data_end+0xffff0750>

00010ab0 <__fixsfsi>:
   10ab0:	200ad5fa 	srli	r5,r4,23
   10ab4:	00c02034 	movhi	r3,128
   10ab8:	18ffffc4 	addi	r3,r3,-1
   10abc:	29403fcc 	andi	r5,r5,255
   10ac0:	00801f84 	movi	r2,126
   10ac4:	1906703a 	and	r3,r3,r4
   10ac8:	2008d7fa 	srli	r4,r4,31
   10acc:	11400e0e 	bge	r2,r5,10b08 <__fixsfsi+0x58>
   10ad0:	00802744 	movi	r2,157
   10ad4:	11400816 	blt	r2,r5,10af8 <__fixsfsi+0x48>
   10ad8:	00802544 	movi	r2,149
   10adc:	18c02034 	orhi	r3,r3,128
   10ae0:	11400b0e 	bge	r2,r5,10b10 <__fixsfsi+0x60>
   10ae4:	28bfda84 	addi	r2,r5,-150
   10ae8:	1884983a 	sll	r2,r3,r2
   10aec:	20000726 	beq	r4,zero,10b0c <__fixsfsi+0x5c>
   10af0:	0085c83a 	sub	r2,zero,r2
   10af4:	f800283a 	ret
   10af8:	00a00034 	movhi	r2,32768
   10afc:	10bfffc4 	addi	r2,r2,-1
   10b00:	2085883a 	add	r2,r4,r2
   10b04:	f800283a 	ret
   10b08:	0005883a 	mov	r2,zero
   10b0c:	f800283a 	ret
   10b10:	00802584 	movi	r2,150
   10b14:	1145c83a 	sub	r2,r2,r5
   10b18:	1884d83a 	srl	r2,r3,r2
   10b1c:	003ff306 	br	10aec <__alt_data_end+0xffff0aec>

00010b20 <__muldf3>:
   10b20:	deffee04 	addi	sp,sp,-72
   10b24:	dd000c15 	stw	r20,48(sp)
   10b28:	2828d53a 	srli	r20,r5,20
   10b2c:	ddc00f15 	stw	r23,60(sp)
   10b30:	282ed7fa 	srli	r23,r5,31
   10b34:	dc000815 	stw	r16,32(sp)
   10b38:	04000434 	movhi	r16,16
   10b3c:	dcc00b15 	stw	r19,44(sp)
   10b40:	843fffc4 	addi	r16,r16,-1
   10b44:	dfc01115 	stw	ra,68(sp)
   10b48:	df001015 	stw	fp,64(sp)
   10b4c:	dd800e15 	stw	r22,56(sp)
   10b50:	dd400d15 	stw	r21,52(sp)
   10b54:	dc800a15 	stw	r18,40(sp)
   10b58:	dc400915 	stw	r17,36(sp)
   10b5c:	a501ffcc 	andi	r20,r20,2047
   10b60:	2c20703a 	and	r16,r5,r16
   10b64:	b827883a 	mov	r19,r23
   10b68:	ba403fcc 	andi	r9,r23,255
   10b6c:	a0006026 	beq	r20,zero,10cf0 <__muldf3+0x1d0>
   10b70:	0081ffc4 	movi	r2,2047
   10b74:	202d883a 	mov	r22,r4
   10b78:	a0803626 	beq	r20,r2,10c54 <__muldf3+0x134>
   10b7c:	84000434 	orhi	r16,r16,16
   10b80:	200ad77a 	srli	r5,r4,29
   10b84:	800490fa 	slli	r2,r16,3
   10b88:	202c90fa 	slli	r22,r4,3
   10b8c:	a53f0044 	addi	r20,r20,-1023
   10b90:	28a0b03a 	or	r16,r5,r2
   10b94:	002b883a 	mov	r21,zero
   10b98:	000b883a 	mov	r5,zero
   10b9c:	3804d53a 	srli	r2,r7,20
   10ba0:	3838d7fa 	srli	fp,r7,31
   10ba4:	04400434 	movhi	r17,16
   10ba8:	8c7fffc4 	addi	r17,r17,-1
   10bac:	1081ffcc 	andi	r2,r2,2047
   10bb0:	3025883a 	mov	r18,r6
   10bb4:	3c62703a 	and	r17,r7,r17
   10bb8:	e2803fcc 	andi	r10,fp,255
   10bbc:	10006d26 	beq	r2,zero,10d74 <__muldf3+0x254>
   10bc0:	00c1ffc4 	movi	r3,2047
   10bc4:	10c06526 	beq	r2,r3,10d5c <__muldf3+0x23c>
   10bc8:	8c400434 	orhi	r17,r17,16
   10bcc:	300ed77a 	srli	r7,r6,29
   10bd0:	880690fa 	slli	r3,r17,3
   10bd4:	302490fa 	slli	r18,r6,3
   10bd8:	10bf0044 	addi	r2,r2,-1023
   10bdc:	38e2b03a 	or	r17,r7,r3
   10be0:	000f883a 	mov	r7,zero
   10be4:	a087883a 	add	r3,r20,r2
   10be8:	010003c4 	movi	r4,15
   10bec:	3d44b03a 	or	r2,r7,r21
   10bf0:	e5ccf03a 	xor	r6,fp,r23
   10bf4:	1a000044 	addi	r8,r3,1
   10bf8:	20809b36 	bltu	r4,r2,10e68 <__muldf3+0x348>
   10bfc:	100490ba 	slli	r2,r2,2
   10c00:	01000074 	movhi	r4,1
   10c04:	21030504 	addi	r4,r4,3092
   10c08:	1105883a 	add	r2,r2,r4
   10c0c:	10800017 	ldw	r2,0(r2)
   10c10:	1000683a 	jmp	r2
   10c14:	00010e68 	cmpgeui	zero,zero,1081
   10c18:	00010c74 	movhi	zero,1073
   10c1c:	00010c74 	movhi	zero,1073
   10c20:	00010c70 	cmpltui	zero,zero,1073
   10c24:	00010e44 	movi	zero,1081
   10c28:	00010e44 	movi	zero,1081
   10c2c:	00010e2c 	andhi	zero,zero,1080
   10c30:	00010c70 	cmpltui	zero,zero,1073
   10c34:	00010e44 	movi	zero,1081
   10c38:	00010e2c 	andhi	zero,zero,1080
   10c3c:	00010e44 	movi	zero,1081
   10c40:	00010c70 	cmpltui	zero,zero,1073
   10c44:	00010e54 	movui	zero,1081
   10c48:	00010e54 	movui	zero,1081
   10c4c:	00010e54 	movui	zero,1081
   10c50:	000111b4 	movhi	zero,1094
   10c54:	2404b03a 	or	r2,r4,r16
   10c58:	1000711e 	bne	r2,zero,10e20 <__muldf3+0x300>
   10c5c:	05400204 	movi	r21,8
   10c60:	0021883a 	mov	r16,zero
   10c64:	002d883a 	mov	r22,zero
   10c68:	01400084 	movi	r5,2
   10c6c:	003fcb06 	br	10b9c <__alt_data_end+0xffff0b9c>
   10c70:	500d883a 	mov	r6,r10
   10c74:	00800084 	movi	r2,2
   10c78:	38805926 	beq	r7,r2,10de0 <__muldf3+0x2c0>
   10c7c:	008000c4 	movi	r2,3
   10c80:	3881bb26 	beq	r7,r2,11370 <__muldf3+0x850>
   10c84:	00800044 	movi	r2,1
   10c88:	3881961e 	bne	r7,r2,112e4 <__muldf3+0x7c4>
   10c8c:	3027883a 	mov	r19,r6
   10c90:	0005883a 	mov	r2,zero
   10c94:	0021883a 	mov	r16,zero
   10c98:	002d883a 	mov	r22,zero
   10c9c:	1004953a 	slli	r2,r2,20
   10ca0:	98c03fcc 	andi	r3,r19,255
   10ca4:	04400434 	movhi	r17,16
   10ca8:	8c7fffc4 	addi	r17,r17,-1
   10cac:	180697fa 	slli	r3,r3,31
   10cb0:	8460703a 	and	r16,r16,r17
   10cb4:	80a0b03a 	or	r16,r16,r2
   10cb8:	80c6b03a 	or	r3,r16,r3
   10cbc:	b005883a 	mov	r2,r22
   10cc0:	dfc01117 	ldw	ra,68(sp)
   10cc4:	df001017 	ldw	fp,64(sp)
   10cc8:	ddc00f17 	ldw	r23,60(sp)
   10ccc:	dd800e17 	ldw	r22,56(sp)
   10cd0:	dd400d17 	ldw	r21,52(sp)
   10cd4:	dd000c17 	ldw	r20,48(sp)
   10cd8:	dcc00b17 	ldw	r19,44(sp)
   10cdc:	dc800a17 	ldw	r18,40(sp)
   10ce0:	dc400917 	ldw	r17,36(sp)
   10ce4:	dc000817 	ldw	r16,32(sp)
   10ce8:	dec01204 	addi	sp,sp,72
   10cec:	f800283a 	ret
   10cf0:	2404b03a 	or	r2,r4,r16
   10cf4:	202b883a 	mov	r21,r4
   10cf8:	10004426 	beq	r2,zero,10e0c <__muldf3+0x2ec>
   10cfc:	80015126 	beq	r16,zero,11244 <__muldf3+0x724>
   10d00:	8009883a 	mov	r4,r16
   10d04:	d9800715 	stw	r6,28(sp)
   10d08:	d9c00215 	stw	r7,8(sp)
   10d0c:	da400415 	stw	r9,16(sp)
   10d10:	00116100 	call	11610 <__clzsi2>
   10d14:	d9800717 	ldw	r6,28(sp)
   10d18:	d9c00217 	ldw	r7,8(sp)
   10d1c:	da400417 	ldw	r9,16(sp)
   10d20:	113ffd44 	addi	r4,r2,-11
   10d24:	00c00704 	movi	r3,28
   10d28:	19014216 	blt	r3,r4,11234 <__muldf3+0x714>
   10d2c:	00c00744 	movi	r3,29
   10d30:	15bffe04 	addi	r22,r2,-8
   10d34:	1907c83a 	sub	r3,r3,r4
   10d38:	85a0983a 	sll	r16,r16,r22
   10d3c:	a8c6d83a 	srl	r3,r21,r3
   10d40:	adac983a 	sll	r22,r21,r22
   10d44:	1c20b03a 	or	r16,r3,r16
   10d48:	1080fcc4 	addi	r2,r2,1011
   10d4c:	00a9c83a 	sub	r20,zero,r2
   10d50:	002b883a 	mov	r21,zero
   10d54:	000b883a 	mov	r5,zero
   10d58:	003f9006 	br	10b9c <__alt_data_end+0xffff0b9c>
   10d5c:	3446b03a 	or	r3,r6,r17
   10d60:	1800281e 	bne	r3,zero,10e04 <__muldf3+0x2e4>
   10d64:	0023883a 	mov	r17,zero
   10d68:	0025883a 	mov	r18,zero
   10d6c:	01c00084 	movi	r7,2
   10d70:	003f9c06 	br	10be4 <__alt_data_end+0xffff0be4>
   10d74:	3446b03a 	or	r3,r6,r17
   10d78:	18001e26 	beq	r3,zero,10df4 <__muldf3+0x2d4>
   10d7c:	88012126 	beq	r17,zero,11204 <__muldf3+0x6e4>
   10d80:	8809883a 	mov	r4,r17
   10d84:	d9400215 	stw	r5,8(sp)
   10d88:	d9800715 	stw	r6,28(sp)
   10d8c:	da400415 	stw	r9,16(sp)
   10d90:	da800315 	stw	r10,12(sp)
   10d94:	00116100 	call	11610 <__clzsi2>
   10d98:	d9400217 	ldw	r5,8(sp)
   10d9c:	d9800717 	ldw	r6,28(sp)
   10da0:	da400417 	ldw	r9,16(sp)
   10da4:	da800317 	ldw	r10,12(sp)
   10da8:	113ffd44 	addi	r4,r2,-11
   10dac:	00c00704 	movi	r3,28
   10db0:	19011016 	blt	r3,r4,111f4 <__muldf3+0x6d4>
   10db4:	00c00744 	movi	r3,29
   10db8:	14bffe04 	addi	r18,r2,-8
   10dbc:	1907c83a 	sub	r3,r3,r4
   10dc0:	8ca2983a 	sll	r17,r17,r18
   10dc4:	30c6d83a 	srl	r3,r6,r3
   10dc8:	34a4983a 	sll	r18,r6,r18
   10dcc:	1c62b03a 	or	r17,r3,r17
   10dd0:	1080fcc4 	addi	r2,r2,1011
   10dd4:	0085c83a 	sub	r2,zero,r2
   10dd8:	000f883a 	mov	r7,zero
   10ddc:	003f8106 	br	10be4 <__alt_data_end+0xffff0be4>
   10de0:	3027883a 	mov	r19,r6
   10de4:	0081ffc4 	movi	r2,2047
   10de8:	0021883a 	mov	r16,zero
   10dec:	002d883a 	mov	r22,zero
   10df0:	003faa06 	br	10c9c <__alt_data_end+0xffff0c9c>
   10df4:	0023883a 	mov	r17,zero
   10df8:	0025883a 	mov	r18,zero
   10dfc:	01c00044 	movi	r7,1
   10e00:	003f7806 	br	10be4 <__alt_data_end+0xffff0be4>
   10e04:	01c000c4 	movi	r7,3
   10e08:	003f7606 	br	10be4 <__alt_data_end+0xffff0be4>
   10e0c:	05400104 	movi	r21,4
   10e10:	0021883a 	mov	r16,zero
   10e14:	002d883a 	mov	r22,zero
   10e18:	01400044 	movi	r5,1
   10e1c:	003f5f06 	br	10b9c <__alt_data_end+0xffff0b9c>
   10e20:	05400304 	movi	r21,12
   10e24:	014000c4 	movi	r5,3
   10e28:	003f5c06 	br	10b9c <__alt_data_end+0xffff0b9c>
   10e2c:	04000434 	movhi	r16,16
   10e30:	0027883a 	mov	r19,zero
   10e34:	843fffc4 	addi	r16,r16,-1
   10e38:	05bfffc4 	movi	r22,-1
   10e3c:	0081ffc4 	movi	r2,2047
   10e40:	003f9606 	br	10c9c <__alt_data_end+0xffff0c9c>
   10e44:	8023883a 	mov	r17,r16
   10e48:	b025883a 	mov	r18,r22
   10e4c:	280f883a 	mov	r7,r5
   10e50:	003f8806 	br	10c74 <__alt_data_end+0xffff0c74>
   10e54:	8023883a 	mov	r17,r16
   10e58:	b025883a 	mov	r18,r22
   10e5c:	480d883a 	mov	r6,r9
   10e60:	280f883a 	mov	r7,r5
   10e64:	003f8306 	br	10c74 <__alt_data_end+0xffff0c74>
   10e68:	b026d43a 	srli	r19,r22,16
   10e6c:	902ed43a 	srli	r23,r18,16
   10e70:	b5bfffcc 	andi	r22,r22,65535
   10e74:	94bfffcc 	andi	r18,r18,65535
   10e78:	b00b883a 	mov	r5,r22
   10e7c:	9009883a 	mov	r4,r18
   10e80:	d8c00515 	stw	r3,20(sp)
   10e84:	d9800715 	stw	r6,28(sp)
   10e88:	da000615 	stw	r8,24(sp)
   10e8c:	00116740 	call	11674 <__mulsi3>
   10e90:	980b883a 	mov	r5,r19
   10e94:	9009883a 	mov	r4,r18
   10e98:	1029883a 	mov	r20,r2
   10e9c:	00116740 	call	11674 <__mulsi3>
   10ea0:	b80b883a 	mov	r5,r23
   10ea4:	9809883a 	mov	r4,r19
   10ea8:	102b883a 	mov	r21,r2
   10eac:	00116740 	call	11674 <__mulsi3>
   10eb0:	b809883a 	mov	r4,r23
   10eb4:	b00b883a 	mov	r5,r22
   10eb8:	1039883a 	mov	fp,r2
   10ebc:	00116740 	call	11674 <__mulsi3>
   10ec0:	a008d43a 	srli	r4,r20,16
   10ec4:	1545883a 	add	r2,r2,r21
   10ec8:	d8c00517 	ldw	r3,20(sp)
   10ecc:	2085883a 	add	r2,r4,r2
   10ed0:	d9800717 	ldw	r6,28(sp)
   10ed4:	da000617 	ldw	r8,24(sp)
   10ed8:	1540022e 	bgeu	r2,r21,10ee4 <__muldf3+0x3c4>
   10edc:	01000074 	movhi	r4,1
   10ee0:	e139883a 	add	fp,fp,r4
   10ee4:	100e943a 	slli	r7,r2,16
   10ee8:	1004d43a 	srli	r2,r2,16
   10eec:	882ad43a 	srli	r21,r17,16
   10ef0:	a53fffcc 	andi	r20,r20,65535
   10ef4:	8c7fffcc 	andi	r17,r17,65535
   10ef8:	3d29883a 	add	r20,r7,r20
   10efc:	b00b883a 	mov	r5,r22
   10f00:	8809883a 	mov	r4,r17
   10f04:	d8c00515 	stw	r3,20(sp)
   10f08:	d9800715 	stw	r6,28(sp)
   10f0c:	da000615 	stw	r8,24(sp)
   10f10:	dd000115 	stw	r20,4(sp)
   10f14:	d8800015 	stw	r2,0(sp)
   10f18:	00116740 	call	11674 <__mulsi3>
   10f1c:	980b883a 	mov	r5,r19
   10f20:	8809883a 	mov	r4,r17
   10f24:	d8800215 	stw	r2,8(sp)
   10f28:	00116740 	call	11674 <__mulsi3>
   10f2c:	9809883a 	mov	r4,r19
   10f30:	a80b883a 	mov	r5,r21
   10f34:	1029883a 	mov	r20,r2
   10f38:	00116740 	call	11674 <__mulsi3>
   10f3c:	b00b883a 	mov	r5,r22
   10f40:	a809883a 	mov	r4,r21
   10f44:	d8800415 	stw	r2,16(sp)
   10f48:	00116740 	call	11674 <__mulsi3>
   10f4c:	d9c00217 	ldw	r7,8(sp)
   10f50:	1505883a 	add	r2,r2,r20
   10f54:	d8c00517 	ldw	r3,20(sp)
   10f58:	3826d43a 	srli	r19,r7,16
   10f5c:	d9800717 	ldw	r6,28(sp)
   10f60:	da000617 	ldw	r8,24(sp)
   10f64:	9885883a 	add	r2,r19,r2
   10f68:	da400417 	ldw	r9,16(sp)
   10f6c:	1500022e 	bgeu	r2,r20,10f78 <__muldf3+0x458>
   10f70:	01000074 	movhi	r4,1
   10f74:	4913883a 	add	r9,r9,r4
   10f78:	1028d43a 	srli	r20,r2,16
   10f7c:	1004943a 	slli	r2,r2,16
   10f80:	802cd43a 	srli	r22,r16,16
   10f84:	843fffcc 	andi	r16,r16,65535
   10f88:	3cffffcc 	andi	r19,r7,65535
   10f8c:	9009883a 	mov	r4,r18
   10f90:	800b883a 	mov	r5,r16
   10f94:	a269883a 	add	r20,r20,r9
   10f98:	d8c00515 	stw	r3,20(sp)
   10f9c:	d9800715 	stw	r6,28(sp)
   10fa0:	da000615 	stw	r8,24(sp)
   10fa4:	14e7883a 	add	r19,r2,r19
   10fa8:	00116740 	call	11674 <__mulsi3>
   10fac:	9009883a 	mov	r4,r18
   10fb0:	b00b883a 	mov	r5,r22
   10fb4:	d8800315 	stw	r2,12(sp)
   10fb8:	00116740 	call	11674 <__mulsi3>
   10fbc:	b809883a 	mov	r4,r23
   10fc0:	b00b883a 	mov	r5,r22
   10fc4:	d8800215 	stw	r2,8(sp)
   10fc8:	00116740 	call	11674 <__mulsi3>
   10fcc:	b80b883a 	mov	r5,r23
   10fd0:	8009883a 	mov	r4,r16
   10fd4:	d8800415 	stw	r2,16(sp)
   10fd8:	00116740 	call	11674 <__mulsi3>
   10fdc:	da800317 	ldw	r10,12(sp)
   10fe0:	d9c00217 	ldw	r7,8(sp)
   10fe4:	d9000017 	ldw	r4,0(sp)
   10fe8:	502ed43a 	srli	r23,r10,16
   10fec:	11c5883a 	add	r2,r2,r7
   10ff0:	24e5883a 	add	r18,r4,r19
   10ff4:	b885883a 	add	r2,r23,r2
   10ff8:	d8c00517 	ldw	r3,20(sp)
   10ffc:	d9800717 	ldw	r6,28(sp)
   11000:	da000617 	ldw	r8,24(sp)
   11004:	da400417 	ldw	r9,16(sp)
   11008:	11c0022e 	bgeu	r2,r7,11014 <__muldf3+0x4f4>
   1100c:	01000074 	movhi	r4,1
   11010:	4913883a 	add	r9,r9,r4
   11014:	100ed43a 	srli	r7,r2,16
   11018:	1004943a 	slli	r2,r2,16
   1101c:	55ffffcc 	andi	r23,r10,65535
   11020:	3a53883a 	add	r9,r7,r9
   11024:	8809883a 	mov	r4,r17
   11028:	800b883a 	mov	r5,r16
   1102c:	d8c00515 	stw	r3,20(sp)
   11030:	d9800715 	stw	r6,28(sp)
   11034:	da000615 	stw	r8,24(sp)
   11038:	da400415 	stw	r9,16(sp)
   1103c:	15ef883a 	add	r23,r2,r23
   11040:	00116740 	call	11674 <__mulsi3>
   11044:	8809883a 	mov	r4,r17
   11048:	b00b883a 	mov	r5,r22
   1104c:	d8800215 	stw	r2,8(sp)
   11050:	00116740 	call	11674 <__mulsi3>
   11054:	b00b883a 	mov	r5,r22
   11058:	a809883a 	mov	r4,r21
   1105c:	d8800315 	stw	r2,12(sp)
   11060:	00116740 	call	11674 <__mulsi3>
   11064:	8009883a 	mov	r4,r16
   11068:	a80b883a 	mov	r5,r21
   1106c:	1023883a 	mov	r17,r2
   11070:	00116740 	call	11674 <__mulsi3>
   11074:	d9c00217 	ldw	r7,8(sp)
   11078:	da800317 	ldw	r10,12(sp)
   1107c:	d8c00517 	ldw	r3,20(sp)
   11080:	3808d43a 	srli	r4,r7,16
   11084:	1285883a 	add	r2,r2,r10
   11088:	d9800717 	ldw	r6,28(sp)
   1108c:	2085883a 	add	r2,r4,r2
   11090:	da000617 	ldw	r8,24(sp)
   11094:	da400417 	ldw	r9,16(sp)
   11098:	1280022e 	bgeu	r2,r10,110a4 <__muldf3+0x584>
   1109c:	01000074 	movhi	r4,1
   110a0:	8923883a 	add	r17,r17,r4
   110a4:	1008943a 	slli	r4,r2,16
   110a8:	39ffffcc 	andi	r7,r7,65535
   110ac:	e4b9883a 	add	fp,fp,r18
   110b0:	21cf883a 	add	r7,r4,r7
   110b4:	e4e7803a 	cmpltu	r19,fp,r19
   110b8:	3d0f883a 	add	r7,r7,r20
   110bc:	bf39883a 	add	fp,r23,fp
   110c0:	99c9883a 	add	r4,r19,r7
   110c4:	e5ef803a 	cmpltu	r23,fp,r23
   110c8:	490b883a 	add	r5,r9,r4
   110cc:	1004d43a 	srli	r2,r2,16
   110d0:	b965883a 	add	r18,r23,r5
   110d4:	24c9803a 	cmpltu	r4,r4,r19
   110d8:	3d29803a 	cmpltu	r20,r7,r20
   110dc:	a128b03a 	or	r20,r20,r4
   110e0:	95ef803a 	cmpltu	r23,r18,r23
   110e4:	2a53803a 	cmpltu	r9,r5,r9
   110e8:	a0a9883a 	add	r20,r20,r2
   110ec:	4deeb03a 	or	r23,r9,r23
   110f0:	a5ef883a 	add	r23,r20,r23
   110f4:	bc63883a 	add	r17,r23,r17
   110f8:	e004927a 	slli	r2,fp,9
   110fc:	d9000117 	ldw	r4,4(sp)
   11100:	882e927a 	slli	r23,r17,9
   11104:	9022d5fa 	srli	r17,r18,23
   11108:	e038d5fa 	srli	fp,fp,23
   1110c:	1104b03a 	or	r2,r2,r4
   11110:	9024927a 	slli	r18,r18,9
   11114:	1004c03a 	cmpne	r2,r2,zero
   11118:	bc62b03a 	or	r17,r23,r17
   1111c:	1738b03a 	or	fp,r2,fp
   11120:	8880402c 	andhi	r2,r17,256
   11124:	e4a4b03a 	or	r18,fp,r18
   11128:	10000726 	beq	r2,zero,11148 <__muldf3+0x628>
   1112c:	9006d07a 	srli	r3,r18,1
   11130:	880497fa 	slli	r2,r17,31
   11134:	9480004c 	andi	r18,r18,1
   11138:	8822d07a 	srli	r17,r17,1
   1113c:	1ca4b03a 	or	r18,r3,r18
   11140:	14a4b03a 	or	r18,r2,r18
   11144:	4007883a 	mov	r3,r8
   11148:	1880ffc4 	addi	r2,r3,1023
   1114c:	0080460e 	bge	zero,r2,11268 <__muldf3+0x748>
   11150:	910001cc 	andi	r4,r18,7
   11154:	20000726 	beq	r4,zero,11174 <__muldf3+0x654>
   11158:	910003cc 	andi	r4,r18,15
   1115c:	01400104 	movi	r5,4
   11160:	21400426 	beq	r4,r5,11174 <__muldf3+0x654>
   11164:	9149883a 	add	r4,r18,r5
   11168:	24a5803a 	cmpltu	r18,r4,r18
   1116c:	8ca3883a 	add	r17,r17,r18
   11170:	2025883a 	mov	r18,r4
   11174:	8900402c 	andhi	r4,r17,256
   11178:	20000426 	beq	r4,zero,1118c <__muldf3+0x66c>
   1117c:	18810004 	addi	r2,r3,1024
   11180:	00ffc034 	movhi	r3,65280
   11184:	18ffffc4 	addi	r3,r3,-1
   11188:	88e2703a 	and	r17,r17,r3
   1118c:	00c1ff84 	movi	r3,2046
   11190:	18bf1316 	blt	r3,r2,10de0 <__alt_data_end+0xffff0de0>
   11194:	882c977a 	slli	r22,r17,29
   11198:	9024d0fa 	srli	r18,r18,3
   1119c:	8822927a 	slli	r17,r17,9
   111a0:	1081ffcc 	andi	r2,r2,2047
   111a4:	b4acb03a 	or	r22,r22,r18
   111a8:	8820d33a 	srli	r16,r17,12
   111ac:	3027883a 	mov	r19,r6
   111b0:	003eba06 	br	10c9c <__alt_data_end+0xffff0c9c>
   111b4:	8080022c 	andhi	r2,r16,8
   111b8:	10000926 	beq	r2,zero,111e0 <__muldf3+0x6c0>
   111bc:	8880022c 	andhi	r2,r17,8
   111c0:	1000071e 	bne	r2,zero,111e0 <__muldf3+0x6c0>
   111c4:	00800434 	movhi	r2,16
   111c8:	8c000234 	orhi	r16,r17,8
   111cc:	10bfffc4 	addi	r2,r2,-1
   111d0:	e027883a 	mov	r19,fp
   111d4:	80a0703a 	and	r16,r16,r2
   111d8:	902d883a 	mov	r22,r18
   111dc:	003f1706 	br	10e3c <__alt_data_end+0xffff0e3c>
   111e0:	00800434 	movhi	r2,16
   111e4:	84000234 	orhi	r16,r16,8
   111e8:	10bfffc4 	addi	r2,r2,-1
   111ec:	80a0703a 	and	r16,r16,r2
   111f0:	003f1206 	br	10e3c <__alt_data_end+0xffff0e3c>
   111f4:	147ff604 	addi	r17,r2,-40
   111f8:	3462983a 	sll	r17,r6,r17
   111fc:	0025883a 	mov	r18,zero
   11200:	003ef306 	br	10dd0 <__alt_data_end+0xffff0dd0>
   11204:	3009883a 	mov	r4,r6
   11208:	d9400215 	stw	r5,8(sp)
   1120c:	d9800715 	stw	r6,28(sp)
   11210:	da400415 	stw	r9,16(sp)
   11214:	da800315 	stw	r10,12(sp)
   11218:	00116100 	call	11610 <__clzsi2>
   1121c:	10800804 	addi	r2,r2,32
   11220:	da800317 	ldw	r10,12(sp)
   11224:	da400417 	ldw	r9,16(sp)
   11228:	d9800717 	ldw	r6,28(sp)
   1122c:	d9400217 	ldw	r5,8(sp)
   11230:	003edd06 	br	10da8 <__alt_data_end+0xffff0da8>
   11234:	143ff604 	addi	r16,r2,-40
   11238:	ac20983a 	sll	r16,r21,r16
   1123c:	002d883a 	mov	r22,zero
   11240:	003ec106 	br	10d48 <__alt_data_end+0xffff0d48>
   11244:	d9800715 	stw	r6,28(sp)
   11248:	d9c00215 	stw	r7,8(sp)
   1124c:	da400415 	stw	r9,16(sp)
   11250:	00116100 	call	11610 <__clzsi2>
   11254:	10800804 	addi	r2,r2,32
   11258:	da400417 	ldw	r9,16(sp)
   1125c:	d9c00217 	ldw	r7,8(sp)
   11260:	d9800717 	ldw	r6,28(sp)
   11264:	003eae06 	br	10d20 <__alt_data_end+0xffff0d20>
   11268:	00c00044 	movi	r3,1
   1126c:	1887c83a 	sub	r3,r3,r2
   11270:	01000e04 	movi	r4,56
   11274:	20fe8516 	blt	r4,r3,10c8c <__alt_data_end+0xffff0c8c>
   11278:	010007c4 	movi	r4,31
   1127c:	20c01b16 	blt	r4,r3,112ec <__muldf3+0x7cc>
   11280:	00800804 	movi	r2,32
   11284:	10c5c83a 	sub	r2,r2,r3
   11288:	888a983a 	sll	r5,r17,r2
   1128c:	90c8d83a 	srl	r4,r18,r3
   11290:	9084983a 	sll	r2,r18,r2
   11294:	88e2d83a 	srl	r17,r17,r3
   11298:	2906b03a 	or	r3,r5,r4
   1129c:	1004c03a 	cmpne	r2,r2,zero
   112a0:	1886b03a 	or	r3,r3,r2
   112a4:	188001cc 	andi	r2,r3,7
   112a8:	10000726 	beq	r2,zero,112c8 <__muldf3+0x7a8>
   112ac:	188003cc 	andi	r2,r3,15
   112b0:	01000104 	movi	r4,4
   112b4:	11000426 	beq	r2,r4,112c8 <__muldf3+0x7a8>
   112b8:	1805883a 	mov	r2,r3
   112bc:	10c00104 	addi	r3,r2,4
   112c0:	1885803a 	cmpltu	r2,r3,r2
   112c4:	88a3883a 	add	r17,r17,r2
   112c8:	8880202c 	andhi	r2,r17,128
   112cc:	10001c26 	beq	r2,zero,11340 <__muldf3+0x820>
   112d0:	3027883a 	mov	r19,r6
   112d4:	00800044 	movi	r2,1
   112d8:	0021883a 	mov	r16,zero
   112dc:	002d883a 	mov	r22,zero
   112e0:	003e6e06 	br	10c9c <__alt_data_end+0xffff0c9c>
   112e4:	4007883a 	mov	r3,r8
   112e8:	003f9706 	br	11148 <__alt_data_end+0xffff1148>
   112ec:	017ff844 	movi	r5,-31
   112f0:	2885c83a 	sub	r2,r5,r2
   112f4:	888ad83a 	srl	r5,r17,r2
   112f8:	00800804 	movi	r2,32
   112fc:	18801a26 	beq	r3,r2,11368 <__muldf3+0x848>
   11300:	01001004 	movi	r4,64
   11304:	20c7c83a 	sub	r3,r4,r3
   11308:	88e2983a 	sll	r17,r17,r3
   1130c:	8ca4b03a 	or	r18,r17,r18
   11310:	9004c03a 	cmpne	r2,r18,zero
   11314:	2884b03a 	or	r2,r5,r2
   11318:	144001cc 	andi	r17,r2,7
   1131c:	88000d1e 	bne	r17,zero,11354 <__muldf3+0x834>
   11320:	0021883a 	mov	r16,zero
   11324:	102cd0fa 	srli	r22,r2,3
   11328:	3027883a 	mov	r19,r6
   1132c:	0005883a 	mov	r2,zero
   11330:	b46cb03a 	or	r22,r22,r17
   11334:	003e5906 	br	10c9c <__alt_data_end+0xffff0c9c>
   11338:	1007883a 	mov	r3,r2
   1133c:	0023883a 	mov	r17,zero
   11340:	8820927a 	slli	r16,r17,9
   11344:	1805883a 	mov	r2,r3
   11348:	8822977a 	slli	r17,r17,29
   1134c:	8020d33a 	srli	r16,r16,12
   11350:	003ff406 	br	11324 <__alt_data_end+0xffff1324>
   11354:	10c003cc 	andi	r3,r2,15
   11358:	01000104 	movi	r4,4
   1135c:	193ff626 	beq	r3,r4,11338 <__alt_data_end+0xffff1338>
   11360:	0023883a 	mov	r17,zero
   11364:	003fd506 	br	112bc <__alt_data_end+0xffff12bc>
   11368:	0023883a 	mov	r17,zero
   1136c:	003fe706 	br	1130c <__alt_data_end+0xffff130c>
   11370:	00800434 	movhi	r2,16
   11374:	8c000234 	orhi	r16,r17,8
   11378:	10bfffc4 	addi	r2,r2,-1
   1137c:	3027883a 	mov	r19,r6
   11380:	80a0703a 	and	r16,r16,r2
   11384:	902d883a 	mov	r22,r18
   11388:	003eac06 	br	10e3c <__alt_data_end+0xffff0e3c>

0001138c <__floatsidf>:
   1138c:	defffd04 	addi	sp,sp,-12
   11390:	dfc00215 	stw	ra,8(sp)
   11394:	dc400115 	stw	r17,4(sp)
   11398:	dc000015 	stw	r16,0(sp)
   1139c:	20002b26 	beq	r4,zero,1144c <__floatsidf+0xc0>
   113a0:	2023883a 	mov	r17,r4
   113a4:	2020d7fa 	srli	r16,r4,31
   113a8:	20002d16 	blt	r4,zero,11460 <__floatsidf+0xd4>
   113ac:	8809883a 	mov	r4,r17
   113b0:	00116100 	call	11610 <__clzsi2>
   113b4:	01410784 	movi	r5,1054
   113b8:	288bc83a 	sub	r5,r5,r2
   113bc:	01010cc4 	movi	r4,1075
   113c0:	2149c83a 	sub	r4,r4,r5
   113c4:	00c007c4 	movi	r3,31
   113c8:	1900160e 	bge	r3,r4,11424 <__floatsidf+0x98>
   113cc:	00c104c4 	movi	r3,1043
   113d0:	1947c83a 	sub	r3,r3,r5
   113d4:	88c6983a 	sll	r3,r17,r3
   113d8:	00800434 	movhi	r2,16
   113dc:	10bfffc4 	addi	r2,r2,-1
   113e0:	1886703a 	and	r3,r3,r2
   113e4:	2941ffcc 	andi	r5,r5,2047
   113e8:	800d883a 	mov	r6,r16
   113ec:	0005883a 	mov	r2,zero
   113f0:	280a953a 	slli	r5,r5,20
   113f4:	31803fcc 	andi	r6,r6,255
   113f8:	01000434 	movhi	r4,16
   113fc:	300c97fa 	slli	r6,r6,31
   11400:	213fffc4 	addi	r4,r4,-1
   11404:	1906703a 	and	r3,r3,r4
   11408:	1946b03a 	or	r3,r3,r5
   1140c:	1986b03a 	or	r3,r3,r6
   11410:	dfc00217 	ldw	ra,8(sp)
   11414:	dc400117 	ldw	r17,4(sp)
   11418:	dc000017 	ldw	r16,0(sp)
   1141c:	dec00304 	addi	sp,sp,12
   11420:	f800283a 	ret
   11424:	00c002c4 	movi	r3,11
   11428:	1887c83a 	sub	r3,r3,r2
   1142c:	88c6d83a 	srl	r3,r17,r3
   11430:	8904983a 	sll	r2,r17,r4
   11434:	01000434 	movhi	r4,16
   11438:	213fffc4 	addi	r4,r4,-1
   1143c:	2941ffcc 	andi	r5,r5,2047
   11440:	1906703a 	and	r3,r3,r4
   11444:	800d883a 	mov	r6,r16
   11448:	003fe906 	br	113f0 <__alt_data_end+0xffff13f0>
   1144c:	000d883a 	mov	r6,zero
   11450:	000b883a 	mov	r5,zero
   11454:	0007883a 	mov	r3,zero
   11458:	0005883a 	mov	r2,zero
   1145c:	003fe406 	br	113f0 <__alt_data_end+0xffff13f0>
   11460:	0123c83a 	sub	r17,zero,r4
   11464:	003fd106 	br	113ac <__alt_data_end+0xffff13ac>

00011468 <__truncdfsf2>:
   11468:	2810d53a 	srli	r8,r5,20
   1146c:	01c00434 	movhi	r7,16
   11470:	39ffffc4 	addi	r7,r7,-1
   11474:	29ce703a 	and	r7,r5,r7
   11478:	4201ffcc 	andi	r8,r8,2047
   1147c:	380e90fa 	slli	r7,r7,3
   11480:	200cd77a 	srli	r6,r4,29
   11484:	42400044 	addi	r9,r8,1
   11488:	4a41ffcc 	andi	r9,r9,2047
   1148c:	00c00044 	movi	r3,1
   11490:	280ad7fa 	srli	r5,r5,31
   11494:	31ceb03a 	or	r7,r6,r7
   11498:	200490fa 	slli	r2,r4,3
   1149c:	1a40230e 	bge	r3,r9,1152c <__truncdfsf2+0xc4>
   114a0:	40ff2004 	addi	r3,r8,-896
   114a4:	01803f84 	movi	r6,254
   114a8:	30c01516 	blt	r6,r3,11500 <__truncdfsf2+0x98>
   114ac:	00c0380e 	bge	zero,r3,11590 <__truncdfsf2+0x128>
   114b0:	200c91ba 	slli	r6,r4,6
   114b4:	380e90fa 	slli	r7,r7,3
   114b8:	1004d77a 	srli	r2,r2,29
   114bc:	300cc03a 	cmpne	r6,r6,zero
   114c0:	31ccb03a 	or	r6,r6,r7
   114c4:	308cb03a 	or	r6,r6,r2
   114c8:	308001cc 	andi	r2,r6,7
   114cc:	10000426 	beq	r2,zero,114e0 <__truncdfsf2+0x78>
   114d0:	308003cc 	andi	r2,r6,15
   114d4:	01000104 	movi	r4,4
   114d8:	11000126 	beq	r2,r4,114e0 <__truncdfsf2+0x78>
   114dc:	31800104 	addi	r6,r6,4
   114e0:	3081002c 	andhi	r2,r6,1024
   114e4:	10001626 	beq	r2,zero,11540 <__truncdfsf2+0xd8>
   114e8:	18c00044 	addi	r3,r3,1
   114ec:	00803fc4 	movi	r2,255
   114f0:	18800326 	beq	r3,r2,11500 <__truncdfsf2+0x98>
   114f4:	300c91ba 	slli	r6,r6,6
   114f8:	300cd27a 	srli	r6,r6,9
   114fc:	00000206 	br	11508 <__truncdfsf2+0xa0>
   11500:	00ffffc4 	movi	r3,-1
   11504:	000d883a 	mov	r6,zero
   11508:	18c03fcc 	andi	r3,r3,255
   1150c:	180895fa 	slli	r4,r3,23
   11510:	00c02034 	movhi	r3,128
   11514:	280a97fa 	slli	r5,r5,31
   11518:	18ffffc4 	addi	r3,r3,-1
   1151c:	30c6703a 	and	r3,r6,r3
   11520:	1906b03a 	or	r3,r3,r4
   11524:	1944b03a 	or	r2,r3,r5
   11528:	f800283a 	ret
   1152c:	40000b1e 	bne	r8,zero,1155c <__truncdfsf2+0xf4>
   11530:	388cb03a 	or	r6,r7,r2
   11534:	0007883a 	mov	r3,zero
   11538:	30000426 	beq	r6,zero,1154c <__truncdfsf2+0xe4>
   1153c:	01800144 	movi	r6,5
   11540:	00803fc4 	movi	r2,255
   11544:	300cd0fa 	srli	r6,r6,3
   11548:	18800a26 	beq	r3,r2,11574 <__truncdfsf2+0x10c>
   1154c:	00802034 	movhi	r2,128
   11550:	10bfffc4 	addi	r2,r2,-1
   11554:	308c703a 	and	r6,r6,r2
   11558:	003feb06 	br	11508 <__alt_data_end+0xffff1508>
   1155c:	3888b03a 	or	r4,r7,r2
   11560:	203fe726 	beq	r4,zero,11500 <__alt_data_end+0xffff1500>
   11564:	380c90fa 	slli	r6,r7,3
   11568:	00c03fc4 	movi	r3,255
   1156c:	31808034 	orhi	r6,r6,512
   11570:	003fd506 	br	114c8 <__alt_data_end+0xffff14c8>
   11574:	303fe226 	beq	r6,zero,11500 <__alt_data_end+0xffff1500>
   11578:	00802034 	movhi	r2,128
   1157c:	31801034 	orhi	r6,r6,64
   11580:	10bfffc4 	addi	r2,r2,-1
   11584:	00ffffc4 	movi	r3,-1
   11588:	308c703a 	and	r6,r6,r2
   1158c:	003fde06 	br	11508 <__alt_data_end+0xffff1508>
   11590:	013ffa44 	movi	r4,-23
   11594:	19000e16 	blt	r3,r4,115d0 <__truncdfsf2+0x168>
   11598:	01000784 	movi	r4,30
   1159c:	20c9c83a 	sub	r4,r4,r3
   115a0:	018007c4 	movi	r6,31
   115a4:	39c02034 	orhi	r7,r7,128
   115a8:	31000b16 	blt	r6,r4,115d8 <__truncdfsf2+0x170>
   115ac:	423f2084 	addi	r8,r8,-894
   115b0:	120c983a 	sll	r6,r2,r8
   115b4:	3a0e983a 	sll	r7,r7,r8
   115b8:	1104d83a 	srl	r2,r2,r4
   115bc:	300cc03a 	cmpne	r6,r6,zero
   115c0:	31ceb03a 	or	r7,r6,r7
   115c4:	388cb03a 	or	r6,r7,r2
   115c8:	0007883a 	mov	r3,zero
   115cc:	003fbe06 	br	114c8 <__alt_data_end+0xffff14c8>
   115d0:	0007883a 	mov	r3,zero
   115d4:	003fd906 	br	1153c <__alt_data_end+0xffff153c>
   115d8:	01bfff84 	movi	r6,-2
   115dc:	30cdc83a 	sub	r6,r6,r3
   115e0:	00c00804 	movi	r3,32
   115e4:	398cd83a 	srl	r6,r7,r6
   115e8:	20c00726 	beq	r4,r3,11608 <__truncdfsf2+0x1a0>
   115ec:	423f2884 	addi	r8,r8,-862
   115f0:	3a0e983a 	sll	r7,r7,r8
   115f4:	3884b03a 	or	r2,r7,r2
   115f8:	1004c03a 	cmpne	r2,r2,zero
   115fc:	118cb03a 	or	r6,r2,r6
   11600:	0007883a 	mov	r3,zero
   11604:	003fb006 	br	114c8 <__alt_data_end+0xffff14c8>
   11608:	000f883a 	mov	r7,zero
   1160c:	003ff906 	br	115f4 <__alt_data_end+0xffff15f4>

00011610 <__clzsi2>:
   11610:	00bfffd4 	movui	r2,65535
   11614:	11000536 	bltu	r2,r4,1162c <__clzsi2+0x1c>
   11618:	00803fc4 	movi	r2,255
   1161c:	11000f36 	bltu	r2,r4,1165c <__clzsi2+0x4c>
   11620:	00800804 	movi	r2,32
   11624:	0007883a 	mov	r3,zero
   11628:	00000506 	br	11640 <__clzsi2+0x30>
   1162c:	00804034 	movhi	r2,256
   11630:	10bfffc4 	addi	r2,r2,-1
   11634:	11000c2e 	bgeu	r2,r4,11668 <__clzsi2+0x58>
   11638:	00800204 	movi	r2,8
   1163c:	00c00604 	movi	r3,24
   11640:	20c8d83a 	srl	r4,r4,r3
   11644:	00c00074 	movhi	r3,1
   11648:	18c72204 	addi	r3,r3,7304
   1164c:	1909883a 	add	r4,r3,r4
   11650:	20c00003 	ldbu	r3,0(r4)
   11654:	10c5c83a 	sub	r2,r2,r3
   11658:	f800283a 	ret
   1165c:	00800604 	movi	r2,24
   11660:	00c00204 	movi	r3,8
   11664:	003ff606 	br	11640 <__alt_data_end+0xffff1640>
   11668:	00800404 	movi	r2,16
   1166c:	1007883a 	mov	r3,r2
   11670:	003ff306 	br	11640 <__alt_data_end+0xffff1640>

00011674 <__mulsi3>:
   11674:	0005883a 	mov	r2,zero
   11678:	20000726 	beq	r4,zero,11698 <__mulsi3+0x24>
   1167c:	20c0004c 	andi	r3,r4,1
   11680:	2008d07a 	srli	r4,r4,1
   11684:	18000126 	beq	r3,zero,1168c <__mulsi3+0x18>
   11688:	1145883a 	add	r2,r2,r5
   1168c:	294b883a 	add	r5,r5,r5
   11690:	203ffa1e 	bne	r4,zero,1167c <__alt_data_end+0xffff167c>
   11694:	f800283a 	ret
   11698:	f800283a 	ret

0001169c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1169c:	deffff04 	addi	sp,sp,-4
   116a0:	01000074 	movhi	r4,1
   116a4:	01400074 	movhi	r5,1
   116a8:	dfc00015 	stw	ra,0(sp)
   116ac:	21076204 	addi	r4,r4,7560
   116b0:	29476304 	addi	r5,r5,7564

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   116b4:	2140061e 	bne	r4,r5,116d0 <alt_load+0x34>
   116b8:	01000074 	movhi	r4,1
   116bc:	01400074 	movhi	r5,1
   116c0:	21000804 	addi	r4,r4,32
   116c4:	29400804 	addi	r5,r5,32
   116c8:	2140121e 	bne	r4,r5,11714 <alt_load+0x78>
   116cc:	00000b06 	br	116fc <alt_load+0x60>
   116d0:	00c00074 	movhi	r3,1
   116d4:	18c76304 	addi	r3,r3,7564
   116d8:	1907c83a 	sub	r3,r3,r4
   116dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   116e0:	10fff526 	beq	r2,r3,116b8 <__alt_data_end+0xffff16b8>
    {
      *to++ = *from++;
   116e4:	114f883a 	add	r7,r2,r5
   116e8:	39c00017 	ldw	r7,0(r7)
   116ec:	110d883a 	add	r6,r2,r4
   116f0:	10800104 	addi	r2,r2,4
   116f4:	31c00015 	stw	r7,0(r6)
   116f8:	003ff906 	br	116e0 <__alt_data_end+0xffff16e0>
   116fc:	01000074 	movhi	r4,1
   11700:	01400074 	movhi	r5,1
   11704:	21071704 	addi	r4,r4,7260
   11708:	29471704 	addi	r5,r5,7260

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1170c:	2140101e 	bne	r4,r5,11750 <alt_load+0xb4>
   11710:	00000b06 	br	11740 <alt_load+0xa4>
   11714:	00c00074 	movhi	r3,1
   11718:	18c00804 	addi	r3,r3,32
   1171c:	1907c83a 	sub	r3,r3,r4
   11720:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11724:	10fff526 	beq	r2,r3,116fc <__alt_data_end+0xffff16fc>
    {
      *to++ = *from++;
   11728:	114f883a 	add	r7,r2,r5
   1172c:	39c00017 	ldw	r7,0(r7)
   11730:	110d883a 	add	r6,r2,r4
   11734:	10800104 	addi	r2,r2,4
   11738:	31c00015 	stw	r7,0(r6)
   1173c:	003ff906 	br	11724 <__alt_data_end+0xffff1724>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11740:	0011a7c0 	call	11a7c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11744:	dfc00017 	ldw	ra,0(sp)
   11748:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1174c:	0011a801 	jmpi	11a80 <alt_icache_flush_all>
   11750:	00c00074 	movhi	r3,1
   11754:	18c76204 	addi	r3,r3,7560
   11758:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1175c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11760:	18bff726 	beq	r3,r2,11740 <__alt_data_end+0xffff1740>
    {
      *to++ = *from++;
   11764:	114f883a 	add	r7,r2,r5
   11768:	39c00017 	ldw	r7,0(r7)
   1176c:	110d883a 	add	r6,r2,r4
   11770:	10800104 	addi	r2,r2,4
   11774:	31c00015 	stw	r7,0(r6)
   11778:	003ff906 	br	11760 <__alt_data_end+0xffff1760>

0001177c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1177c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11780:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11784:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11788:	001199c0 	call	1199c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1178c:	00119bc0 	call	119bc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11790:	d1a00217 	ldw	r6,-32760(gp)
   11794:	d1600317 	ldw	r5,-32756(gp)
   11798:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   1179c:	dfc00017 	ldw	ra,0(sp)
   117a0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   117a4:	00100c41 	jmpi	100c4 <main>

000117a8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   117a8:	defff204 	addi	sp,sp,-56
   117ac:	2005883a 	mov	r2,r4
   117b0:	dfc00a15 	stw	ra,40(sp)
   117b4:	df000915 	stw	fp,36(sp)
   117b8:	ddc00815 	stw	r23,32(sp)
   117bc:	dd800715 	stw	r22,28(sp)
   117c0:	dd400615 	stw	r21,24(sp)
   117c4:	dd000515 	stw	r20,20(sp)
   117c8:	dcc00415 	stw	r19,16(sp)
   117cc:	dc800315 	stw	r18,12(sp)
   117d0:	dc400215 	stw	r17,8(sp)
   117d4:	dc000115 	stw	r16,4(sp)
   117d8:	d9400b15 	stw	r5,44(sp)
   117dc:	d9800c15 	stw	r6,48(sp)
   117e0:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   117e4:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   117e8:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   117ec:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   117f0:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   117f4:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   117f8:	11000007 	ldb	r4,0(r2)
   117fc:	20003a26 	beq	r4,zero,118e8 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11800:	24000226 	beq	r4,r16,1180c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   11804:	14400044 	addi	r17,r2,1
   11808:	00001406 	br	1185c <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   1180c:	14400084 	addi	r17,r2,2
   11810:	10800047 	ldb	r2,1(r2)
   11814:	10003426 	beq	r2,zero,118e8 <alt_printf+0x140>
            {
                if (c == '%')
   11818:	1400021e 	bne	r2,r16,11824 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   1181c:	8009883a 	mov	r4,r16
   11820:	00000e06 	br	1185c <alt_printf+0xb4>
                } 
                else if (c == 'c')
   11824:	1480051e 	bne	r2,r18,1183c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   11828:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   1182c:	ad800104 	addi	r22,r21,4
   11830:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   11834:	00119180 	call	11918 <alt_putchar>
   11838:	00002906 	br	118e0 <alt_printf+0x138>
                }
                else if (c == 'x')
   1183c:	14c0201e 	bne	r2,r19,118c0 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   11840:	adc00017 	ldw	r23,0(r21)
   11844:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   11848:	b8000326 	beq	r23,zero,11858 <alt_printf+0xb0>
   1184c:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   11850:	00c003c4 	movi	r3,15
   11854:	00000306 	br	11864 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   11858:	01000c04 	movi	r4,48
   1185c:	00119180 	call	11918 <alt_putchar>
                        continue;
   11860:	00001f06 	br	118e0 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   11864:	1d84983a 	sll	r2,r3,r22
   11868:	15c4703a 	and	r2,r2,r23
   1186c:	1000021e 	bne	r2,zero,11878 <alt_printf+0xd0>
                        digit_shift -= 4;
   11870:	b5bfff04 	addi	r22,r22,-4
   11874:	003ffb06 	br	11864 <__alt_data_end+0xffff1864>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11878:	070003c4 	movi	fp,15
                        if (digit <= 9)
   1187c:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11880:	b0001716 	blt	r22,zero,118e0 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11884:	e588983a 	sll	r4,fp,r22
   11888:	25c8703a 	and	r4,r4,r23
   1188c:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   11890:	19000236 	bltu	r3,r4,1189c <alt_printf+0xf4>
                            c = '0' + digit;
   11894:	21000c04 	addi	r4,r4,48
   11898:	00000106 	br	118a0 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   1189c:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   118a0:	21003fcc 	andi	r4,r4,255
   118a4:	2100201c 	xori	r4,r4,128
   118a8:	213fe004 	addi	r4,r4,-128
   118ac:	d8c00015 	stw	r3,0(sp)
   118b0:	00119180 	call	11918 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   118b4:	b5bfff04 	addi	r22,r22,-4
   118b8:	d8c00017 	ldw	r3,0(sp)
   118bc:	003ff006 	br	11880 <__alt_data_end+0xffff1880>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   118c0:	1500071e 	bne	r2,r20,118e0 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   118c4:	ad800017 	ldw	r22,0(r21)
   118c8:	ad400104 	addi	r21,r21,4

                    while(*s)
   118cc:	b1000007 	ldb	r4,0(r22)
   118d0:	20000326 	beq	r4,zero,118e0 <alt_printf+0x138>
                      alt_putchar(*s++);
   118d4:	b5800044 	addi	r22,r22,1
   118d8:	00119180 	call	11918 <alt_putchar>
   118dc:	003ffb06 	br	118cc <__alt_data_end+0xffff18cc>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   118e0:	8805883a 	mov	r2,r17
   118e4:	003fc406 	br	117f8 <__alt_data_end+0xffff17f8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   118e8:	dfc00a17 	ldw	ra,40(sp)
   118ec:	df000917 	ldw	fp,36(sp)
   118f0:	ddc00817 	ldw	r23,32(sp)
   118f4:	dd800717 	ldw	r22,28(sp)
   118f8:	dd400617 	ldw	r21,24(sp)
   118fc:	dd000517 	ldw	r20,20(sp)
   11900:	dcc00417 	ldw	r19,16(sp)
   11904:	dc800317 	ldw	r18,12(sp)
   11908:	dc400217 	ldw	r17,8(sp)
   1190c:	dc000117 	ldw	r16,4(sp)
   11910:	dec00e04 	addi	sp,sp,56
   11914:	f800283a 	ret

00011918 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11918:	defffd04 	addi	sp,sp,-12
   1191c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   11920:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11924:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11928:	01000074 	movhi	r4,1
   1192c:	000f883a 	mov	r7,zero
   11930:	01800044 	movi	r6,1
   11934:	d80b883a 	mov	r5,sp
   11938:	21076204 	addi	r4,r4,7560
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1193c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11940:	00119c00 	call	119c0 <altera_avalon_jtag_uart_write>
   11944:	00ffffc4 	movi	r3,-1
   11948:	10c00126 	beq	r2,r3,11950 <alt_putchar+0x38>
        return -1;
    }
    return c;
   1194c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   11950:	dfc00217 	ldw	ra,8(sp)
   11954:	dc000117 	ldw	r16,4(sp)
   11958:	dec00304 	addi	sp,sp,12
   1195c:	f800283a 	ret

00011960 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   11960:	defffe04 	addi	sp,sp,-8
   11964:	dc000015 	stw	r16,0(sp)
   11968:	dfc00115 	stw	ra,4(sp)
   1196c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11970:	0011a8c0 	call	11a8c <strlen>
   11974:	01000074 	movhi	r4,1
   11978:	000f883a 	mov	r7,zero
   1197c:	100d883a 	mov	r6,r2
   11980:	800b883a 	mov	r5,r16
   11984:	21076204 	addi	r4,r4,7560
#else
    return fputs(str, stdout);
#endif
#endif
}
   11988:	dfc00117 	ldw	ra,4(sp)
   1198c:	dc000017 	ldw	r16,0(sp)
   11990:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11994:	00119c01 	jmpi	119c0 <altera_avalon_jtag_uart_write>

00011998 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   11998:	00119f41 	jmpi	119f4 <alt_busy_sleep>

0001199c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1199c:	deffff04 	addi	sp,sp,-4
   119a0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   119a4:	0011a840 	call	11a84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   119a8:	00800044 	movi	r2,1
   119ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   119b0:	dfc00017 	ldw	ra,0(sp)
   119b4:	dec00104 	addi	sp,sp,4
   119b8:	f800283a 	ret

000119bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   119bc:	f800283a 	ret

000119c0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   119c0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   119c4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   119c8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   119cc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   119d0:	2980072e 	bgeu	r5,r6,119f0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   119d4:	38c00037 	ldwio	r3,0(r7)
   119d8:	18ffffec 	andhi	r3,r3,65535
   119dc:	183ffc26 	beq	r3,zero,119d0 <__alt_data_end+0xffff19d0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   119e0:	28c00007 	ldb	r3,0(r5)
   119e4:	20c00035 	stwio	r3,0(r4)
   119e8:	29400044 	addi	r5,r5,1
   119ec:	003ff806 	br	119d0 <__alt_data_end+0xffff19d0>

  return count;
}
   119f0:	f800283a 	ret

000119f4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   119f4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   119f8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   119fc:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11a00:	dc000015 	stw	r16,0(sp)
   11a04:	dfc00115 	stw	ra,4(sp)
   11a08:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11a0c:	0011ba00 	call	11ba0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11a10:	10001026 	beq	r2,zero,11a54 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11a14:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11a18:	013999b4 	movhi	r4,58982
   11a1c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11a20:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11a24:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11a28:	297fffc4 	addi	r5,r5,-1
   11a2c:	283ffe1e 	bne	r5,zero,11a28 <__alt_data_end+0xffff1a28>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11a30:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11a34:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11a38:	18bffb16 	blt	r3,r2,11a28 <__alt_data_end+0xffff1a28>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11a3c:	01400144 	movi	r5,5
   11a40:	8009883a 	mov	r4,r16
   11a44:	00116740 	call	11674 <__mulsi3>
   11a48:	10bfffc4 	addi	r2,r2,-1
   11a4c:	103ffe1e 	bne	r2,zero,11a48 <__alt_data_end+0xffff1a48>
   11a50:	00000506 	br	11a68 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11a54:	01400144 	movi	r5,5
   11a58:	8009883a 	mov	r4,r16
   11a5c:	00116740 	call	11674 <__mulsi3>
   11a60:	10bfffc4 	addi	r2,r2,-1
   11a64:	00bffe16 	blt	zero,r2,11a60 <__alt_data_end+0xffff1a60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   11a68:	0005883a 	mov	r2,zero
   11a6c:	dfc00117 	ldw	ra,4(sp)
   11a70:	dc000017 	ldw	r16,0(sp)
   11a74:	dec00204 	addi	sp,sp,8
   11a78:	f800283a 	ret

00011a7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11a7c:	f800283a 	ret

00011a80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11a80:	f800283a 	ret

00011a84 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11a84:	000170fa 	wrctl	ienable,zero
   11a88:	f800283a 	ret

00011a8c <strlen>:
   11a8c:	2005883a 	mov	r2,r4
   11a90:	10c00007 	ldb	r3,0(r2)
   11a94:	18000226 	beq	r3,zero,11aa0 <strlen+0x14>
   11a98:	10800044 	addi	r2,r2,1
   11a9c:	003ffc06 	br	11a90 <__alt_data_end+0xffff1a90>
   11aa0:	1105c83a 	sub	r2,r2,r4
   11aa4:	f800283a 	ret

00011aa8 <__divsi3>:
   11aa8:	20001b16 	blt	r4,zero,11b18 <__divsi3+0x70>
   11aac:	000f883a 	mov	r7,zero
   11ab0:	28001616 	blt	r5,zero,11b0c <__divsi3+0x64>
   11ab4:	200d883a 	mov	r6,r4
   11ab8:	29001a2e 	bgeu	r5,r4,11b24 <__divsi3+0x7c>
   11abc:	00800804 	movi	r2,32
   11ac0:	00c00044 	movi	r3,1
   11ac4:	00000106 	br	11acc <__divsi3+0x24>
   11ac8:	10000d26 	beq	r2,zero,11b00 <__divsi3+0x58>
   11acc:	294b883a 	add	r5,r5,r5
   11ad0:	10bfffc4 	addi	r2,r2,-1
   11ad4:	18c7883a 	add	r3,r3,r3
   11ad8:	293ffb36 	bltu	r5,r4,11ac8 <__alt_data_end+0xffff1ac8>
   11adc:	0005883a 	mov	r2,zero
   11ae0:	18000726 	beq	r3,zero,11b00 <__divsi3+0x58>
   11ae4:	0005883a 	mov	r2,zero
   11ae8:	31400236 	bltu	r6,r5,11af4 <__divsi3+0x4c>
   11aec:	314dc83a 	sub	r6,r6,r5
   11af0:	10c4b03a 	or	r2,r2,r3
   11af4:	1806d07a 	srli	r3,r3,1
   11af8:	280ad07a 	srli	r5,r5,1
   11afc:	183ffa1e 	bne	r3,zero,11ae8 <__alt_data_end+0xffff1ae8>
   11b00:	38000126 	beq	r7,zero,11b08 <__divsi3+0x60>
   11b04:	0085c83a 	sub	r2,zero,r2
   11b08:	f800283a 	ret
   11b0c:	014bc83a 	sub	r5,zero,r5
   11b10:	39c0005c 	xori	r7,r7,1
   11b14:	003fe706 	br	11ab4 <__alt_data_end+0xffff1ab4>
   11b18:	0109c83a 	sub	r4,zero,r4
   11b1c:	01c00044 	movi	r7,1
   11b20:	003fe306 	br	11ab0 <__alt_data_end+0xffff1ab0>
   11b24:	00c00044 	movi	r3,1
   11b28:	003fee06 	br	11ae4 <__alt_data_end+0xffff1ae4>

00011b2c <__modsi3>:
   11b2c:	20001716 	blt	r4,zero,11b8c <__modsi3+0x60>
   11b30:	000f883a 	mov	r7,zero
   11b34:	2005883a 	mov	r2,r4
   11b38:	28001216 	blt	r5,zero,11b84 <__modsi3+0x58>
   11b3c:	2900162e 	bgeu	r5,r4,11b98 <__modsi3+0x6c>
   11b40:	01800804 	movi	r6,32
   11b44:	00c00044 	movi	r3,1
   11b48:	00000106 	br	11b50 <__modsi3+0x24>
   11b4c:	30000a26 	beq	r6,zero,11b78 <__modsi3+0x4c>
   11b50:	294b883a 	add	r5,r5,r5
   11b54:	31bfffc4 	addi	r6,r6,-1
   11b58:	18c7883a 	add	r3,r3,r3
   11b5c:	293ffb36 	bltu	r5,r4,11b4c <__alt_data_end+0xffff1b4c>
   11b60:	18000526 	beq	r3,zero,11b78 <__modsi3+0x4c>
   11b64:	1806d07a 	srli	r3,r3,1
   11b68:	11400136 	bltu	r2,r5,11b70 <__modsi3+0x44>
   11b6c:	1145c83a 	sub	r2,r2,r5
   11b70:	280ad07a 	srli	r5,r5,1
   11b74:	183ffb1e 	bne	r3,zero,11b64 <__alt_data_end+0xffff1b64>
   11b78:	38000126 	beq	r7,zero,11b80 <__modsi3+0x54>
   11b7c:	0085c83a 	sub	r2,zero,r2
   11b80:	f800283a 	ret
   11b84:	014bc83a 	sub	r5,zero,r5
   11b88:	003fec06 	br	11b3c <__alt_data_end+0xffff1b3c>
   11b8c:	0109c83a 	sub	r4,zero,r4
   11b90:	01c00044 	movi	r7,1
   11b94:	003fe706 	br	11b34 <__alt_data_end+0xffff1b34>
   11b98:	00c00044 	movi	r3,1
   11b9c:	003ff106 	br	11b64 <__alt_data_end+0xffff1b64>

00011ba0 <__udivsi3>:
   11ba0:	200d883a 	mov	r6,r4
   11ba4:	2900152e 	bgeu	r5,r4,11bfc <__udivsi3+0x5c>
   11ba8:	28001416 	blt	r5,zero,11bfc <__udivsi3+0x5c>
   11bac:	00800804 	movi	r2,32
   11bb0:	00c00044 	movi	r3,1
   11bb4:	00000206 	br	11bc0 <__udivsi3+0x20>
   11bb8:	10000e26 	beq	r2,zero,11bf4 <__udivsi3+0x54>
   11bbc:	28000516 	blt	r5,zero,11bd4 <__udivsi3+0x34>
   11bc0:	294b883a 	add	r5,r5,r5
   11bc4:	10bfffc4 	addi	r2,r2,-1
   11bc8:	18c7883a 	add	r3,r3,r3
   11bcc:	293ffa36 	bltu	r5,r4,11bb8 <__alt_data_end+0xffff1bb8>
   11bd0:	18000826 	beq	r3,zero,11bf4 <__udivsi3+0x54>
   11bd4:	0005883a 	mov	r2,zero
   11bd8:	31400236 	bltu	r6,r5,11be4 <__udivsi3+0x44>
   11bdc:	314dc83a 	sub	r6,r6,r5
   11be0:	10c4b03a 	or	r2,r2,r3
   11be4:	1806d07a 	srli	r3,r3,1
   11be8:	280ad07a 	srli	r5,r5,1
   11bec:	183ffa1e 	bne	r3,zero,11bd8 <__alt_data_end+0xffff1bd8>
   11bf0:	f800283a 	ret
   11bf4:	0005883a 	mov	r2,zero
   11bf8:	f800283a 	ret
   11bfc:	00c00044 	movi	r3,1
   11c00:	003ff406 	br	11bd4 <__alt_data_end+0xffff1bd4>

00011c04 <__umodsi3>:
   11c04:	2005883a 	mov	r2,r4
   11c08:	2900122e 	bgeu	r5,r4,11c54 <__umodsi3+0x50>
   11c0c:	28001116 	blt	r5,zero,11c54 <__umodsi3+0x50>
   11c10:	01800804 	movi	r6,32
   11c14:	00c00044 	movi	r3,1
   11c18:	00000206 	br	11c24 <__umodsi3+0x20>
   11c1c:	30000c26 	beq	r6,zero,11c50 <__umodsi3+0x4c>
   11c20:	28000516 	blt	r5,zero,11c38 <__umodsi3+0x34>
   11c24:	294b883a 	add	r5,r5,r5
   11c28:	31bfffc4 	addi	r6,r6,-1
   11c2c:	18c7883a 	add	r3,r3,r3
   11c30:	293ffa36 	bltu	r5,r4,11c1c <__alt_data_end+0xffff1c1c>
   11c34:	18000626 	beq	r3,zero,11c50 <__umodsi3+0x4c>
   11c38:	1806d07a 	srli	r3,r3,1
   11c3c:	11400136 	bltu	r2,r5,11c44 <__umodsi3+0x40>
   11c40:	1145c83a 	sub	r2,r2,r5
   11c44:	280ad07a 	srli	r5,r5,1
   11c48:	183ffb1e 	bne	r3,zero,11c38 <__alt_data_end+0xffff1c38>
   11c4c:	f800283a 	ret
   11c50:	f800283a 	ret
   11c54:	00c00044 	movi	r3,1
   11c58:	003ff706 	br	11c38 <__alt_data_end+0xffff1c38>
