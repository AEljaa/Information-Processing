
HelloWorld.elf:     file format elf32-littlenios2
HelloWorld.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000005d0 memsz 0x000005d0 flags r-x
    LOAD off    0x000015f0 vaddr 0x000105f0 paddr 0x000105f4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000015f8 vaddr 0x000105f8 paddr 0x000105f8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000015f4  2**0
                  CONTENTS
  2 .text         00000528  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a8  00010548  00010548  00001548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000105f0  000105f4  000015f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000105f8  000105f8  000015f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00010604  00010604  000015f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00001618  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000116a  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000948  00000000  00000000  0000296a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000a81  00000000  00000000  000032b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000025c  00000000  00000000  00003d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000083e  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000768  00000000  00000000  000047ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000140  00000000  00000000  00004f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005fc5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00005fc8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005fcb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005fcc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00005fcd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00005fd1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00005fd5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00005fd9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00005fe2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00005feb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00005ff4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000041  00000000  00000000  00006001  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00068f25  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010548 l    d  .rodata	00000000 .rodata
000105f0 l    d  .rwdata	00000000 .rwdata
000105f8 l    d  .bss	00000000 .bss
00010604 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloWorld_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000101f8 g     F .text	0000002c alt_main
000105f4 g       *ABS*	00000000 __flash_rwdata_start
00010224 g     F .text	00000038 alt_putstr
000105f0 g     O .rwdata	00000004 jtag_uart
00010348 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000105fc g     O .bss	00000004 alt_argv
000185f0 g       *ABS*	00000000 _gp
0001025c g     F .text	00000004 usleep
00010464 g     F .text	00000064 .hidden __udivsi3
00010604 g       *ABS*	00000000 __bss_end
00010340 g     F .text	00000004 alt_dcache_flush_all
000105f4 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000105f0 g       *ABS*	00000000 __ram_rodata_end
000104c8 g     F .text	00000058 .hidden __umodsi3
00010604 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010284 g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
00010280 g     F .text	00000004 alt_sys_init
00010520 g     F .text	00000028 .hidden __mulsi3
000105f0 g       *ABS*	00000000 __ram_rwdata_start
00010548 g       *ABS*	00000000 __ram_rodata_start
000102b8 g     F .text	00000088 alt_busy_sleep
00010604 g       *ABS*	00000000 __alt_stack_base
000105f8 g       *ABS*	00000000 __bss_start
0001005c g     F .text	000000bc main
000105f8 g     O .bss	00000004 alt_envp
0001036c g     F .text	00000084 .hidden __divsi3
00010548 g       *ABS*	00000000 __flash_rodata_start
00010260 g     F .text	00000020 alt_irq_init
00010600 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
000105f4 g       *ABS*	00000000 _edata
00010604 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000103f0 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010350 g     F .text	0000001c strlen
00010344 g     F .text	00000004 alt_icache_flush_all
00010118 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a17c14 	ori	gp,gp,34288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10817e14 	ori	r2,r2,1528

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c18114 	ori	r3,r3,1540

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00101180 	call	10118 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00101f80 	call	101f8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <main>:
#include "system.h"

int main()
{
	int switch_datain,button_datain;
	alt_putstr("Hello from Nios II!\n");
   1005c:	01000074 	movhi	r4,1
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"

int main()
{
   10060:	defff904 	addi	sp,sp,-28
	int switch_datain,button_datain;
	alt_putstr("Hello from Nios II!\n");
   10064:	21015204 	addi	r4,r4,1352
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"

int main()
{
   10068:	dfc00615 	stw	ra,24(sp)
   1006c:	dd000415 	stw	r20,16(sp)
   10070:	dcc00315 	stw	r19,12(sp)
   10074:	dc800215 	stw	r18,8(sp)
   10078:	dd400515 	stw	r21,20(sp)
   1007c:	dc400115 	stw	r17,4(sp)
   10080:	dc000015 	stw	r16,0(sp)
	int switch_datain,button_datain;
	alt_putstr("Hello from Nios II!\n");
   10084:	00102240 	call	10224 <alt_putstr>
	alt_putstr("When you press Push Button 0,1 the switching on of the LEDs is done by software\n");
   10088:	01000074 	movhi	r4,1
   1008c:	21015804 	addi	r4,r4,1376
   10090:	00102240 	call	10224 <alt_putstr>
	alt_putstr("But, Switching on/off of LED 2 by SW 2 is done by hardware\n");
   10094:	01000074 	movhi	r4,1
   10098:	21016d04 	addi	r4,r4,1460
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   1009c:	048000b4 	movhi	r18,2
		button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE); // Read the PB
   100a0:	04c000b4 	movhi	r19,2
		switch_datain &= (0b1111111111);
		int currlight=1;

		for(int i=0;i<9;i++){
			currlight = currlight *2;
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
   100a4:	050000b4 	movhi	r20,2
int main()
{
	int switch_datain,button_datain;
	alt_putstr("Hello from Nios II!\n");
	alt_putstr("When you press Push Button 0,1 the switching on of the LEDs is done by software\n");
	alt_putstr("But, Switching on/off of LED 2 by SW 2 is done by hardware\n");
   100a8:	00102240 	call	10224 <alt_putstr>
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   100ac:	94841c04 	addi	r18,r18,4208
		button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE); // Read the PB
   100b0:	9cc42004 	addi	r19,r19,4224
		switch_datain &= (0b1111111111);
		int currlight=1;

		for(int i=0;i<9;i++){
			currlight = currlight *2;
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
   100b4:	a5041804 	addi	r20,r20,4192
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   100b8:	90800037 	ldwio	r2,0(r18)
		button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE); // Read the PB
   100bc:	98800037 	ldwio	r2,0(r19)
   100c0:	04400244 	movi	r17,9
		//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
		switch_datain &= (0b1111111111);
		int currlight=1;
   100c4:	04000044 	movi	r16,1

		for(int i=0;i<9;i++){
			currlight = currlight *2;
   100c8:	8421883a 	add	r16,r16,r16
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
   100cc:	a4000035 	stwio	r16,0(r20)
			usleep(500000); // 0.5s delay
   100d0:	01000234 	movhi	r4,8
   100d4:	21284804 	addi	r4,r4,-24288
   100d8:	054000b4 	movhi	r21,2
   100dc:	8c7fffc4 	addi	r17,r17,-1
   100e0:	001025c0 	call	1025c <usleep>
   100e4:	ad441804 	addi	r21,r21,4192
		button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE); // Read the PB
		//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
		switch_datain &= (0b1111111111);
		int currlight=1;

		for(int i=0;i<9;i++){
   100e8:	883ff71e 	bne	r17,zero,100c8 <__alt_data_end+0xffff00c8>
   100ec:	04400244 	movi	r17,9
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
			usleep(500000); // 0.5s delay
		}

		for(int j=10;j>1;j--){
			currlight = currlight/2;
   100f0:	8004d7fa 	srli	r2,r16,31
   100f4:	1421883a 	add	r16,r2,r16
   100f8:	8021d07a 	srai	r16,r16,1
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight );
   100fc:	ac000035 	stwio	r16,0(r21)
			usleep(500000); // 0.5s delay
   10100:	01000234 	movhi	r4,8
   10104:	21284804 	addi	r4,r4,-24288
   10108:	8c7fffc4 	addi	r17,r17,-1
   1010c:	001025c0 	call	1025c <usleep>
			currlight = currlight *2;
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, currlight);
			usleep(500000); // 0.5s delay
		}

		for(int j=10;j>1;j--){
   10110:	883ff71e 	bne	r17,zero,100f0 <__alt_data_end+0xffff00f0>
   10114:	003fe806 	br	100b8 <__alt_data_end+0xffff00b8>

00010118 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10118:	deffff04 	addi	sp,sp,-4
   1011c:	01000074 	movhi	r4,1
   10120:	01400074 	movhi	r5,1
   10124:	dfc00015 	stw	ra,0(sp)
   10128:	21017c04 	addi	r4,r4,1520
   1012c:	29417d04 	addi	r5,r5,1524

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10130:	2140061e 	bne	r4,r5,1014c <alt_load+0x34>
   10134:	01000074 	movhi	r4,1
   10138:	01400074 	movhi	r5,1
   1013c:	21000804 	addi	r4,r4,32
   10140:	29400804 	addi	r5,r5,32
   10144:	2140121e 	bne	r4,r5,10190 <alt_load+0x78>
   10148:	00000b06 	br	10178 <alt_load+0x60>
   1014c:	00c00074 	movhi	r3,1
   10150:	18c17d04 	addi	r3,r3,1524
   10154:	1907c83a 	sub	r3,r3,r4
   10158:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1015c:	10fff526 	beq	r2,r3,10134 <__alt_data_end+0xffff0134>
    {
      *to++ = *from++;
   10160:	114f883a 	add	r7,r2,r5
   10164:	39c00017 	ldw	r7,0(r7)
   10168:	110d883a 	add	r6,r2,r4
   1016c:	10800104 	addi	r2,r2,4
   10170:	31c00015 	stw	r7,0(r6)
   10174:	003ff906 	br	1015c <__alt_data_end+0xffff015c>
   10178:	01000074 	movhi	r4,1
   1017c:	01400074 	movhi	r5,1
   10180:	21015204 	addi	r4,r4,1352
   10184:	29415204 	addi	r5,r5,1352

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10188:	2140101e 	bne	r4,r5,101cc <alt_load+0xb4>
   1018c:	00000b06 	br	101bc <alt_load+0xa4>
   10190:	00c00074 	movhi	r3,1
   10194:	18c00804 	addi	r3,r3,32
   10198:	1907c83a 	sub	r3,r3,r4
   1019c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101a0:	10fff526 	beq	r2,r3,10178 <__alt_data_end+0xffff0178>
    {
      *to++ = *from++;
   101a4:	114f883a 	add	r7,r2,r5
   101a8:	39c00017 	ldw	r7,0(r7)
   101ac:	110d883a 	add	r6,r2,r4
   101b0:	10800104 	addi	r2,r2,4
   101b4:	31c00015 	stw	r7,0(r6)
   101b8:	003ff906 	br	101a0 <__alt_data_end+0xffff01a0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   101bc:	00103400 	call	10340 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   101c0:	dfc00017 	ldw	ra,0(sp)
   101c4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   101c8:	00103441 	jmpi	10344 <alt_icache_flush_all>
   101cc:	00c00074 	movhi	r3,1
   101d0:	18c17c04 	addi	r3,r3,1520
   101d4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   101d8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101dc:	18bff726 	beq	r3,r2,101bc <__alt_data_end+0xffff01bc>
    {
      *to++ = *from++;
   101e0:	114f883a 	add	r7,r2,r5
   101e4:	39c00017 	ldw	r7,0(r7)
   101e8:	110d883a 	add	r6,r2,r4
   101ec:	10800104 	addi	r2,r2,4
   101f0:	31c00015 	stw	r7,0(r6)
   101f4:	003ff906 	br	101dc <__alt_data_end+0xffff01dc>

000101f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101fc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10200:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10204:	00102600 	call	10260 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10208:	00102800 	call	10280 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1020c:	d1a00217 	ldw	r6,-32760(gp)
   10210:	d1600317 	ldw	r5,-32756(gp)
   10214:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10218:	dfc00017 	ldw	ra,0(sp)
   1021c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10220:	001005c1 	jmpi	1005c <main>

00010224 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10224:	defffe04 	addi	sp,sp,-8
   10228:	dc000015 	stw	r16,0(sp)
   1022c:	dfc00115 	stw	ra,4(sp)
   10230:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10234:	00103500 	call	10350 <strlen>
   10238:	01000074 	movhi	r4,1
   1023c:	000f883a 	mov	r7,zero
   10240:	100d883a 	mov	r6,r2
   10244:	800b883a 	mov	r5,r16
   10248:	21017c04 	addi	r4,r4,1520
#else
    return fputs(str, stdout);
#endif
#endif
}
   1024c:	dfc00117 	ldw	ra,4(sp)
   10250:	dc000017 	ldw	r16,0(sp)
   10254:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10258:	00102841 	jmpi	10284 <altera_avalon_jtag_uart_write>

0001025c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   1025c:	00102b81 	jmpi	102b8 <alt_busy_sleep>

00010260 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10260:	deffff04 	addi	sp,sp,-4
   10264:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10268:	00103480 	call	10348 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1026c:	00800044 	movi	r2,1
   10270:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10274:	dfc00017 	ldw	ra,0(sp)
   10278:	dec00104 	addi	sp,sp,4
   1027c:	f800283a 	ret

00010280 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10280:	f800283a 	ret

00010284 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10284:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10288:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1028c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10290:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10294:	2980072e 	bgeu	r5,r6,102b4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10298:	38c00037 	ldwio	r3,0(r7)
   1029c:	18ffffec 	andhi	r3,r3,65535
   102a0:	183ffc26 	beq	r3,zero,10294 <__alt_data_end+0xffff0294>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   102a4:	28c00007 	ldb	r3,0(r5)
   102a8:	20c00035 	stwio	r3,0(r4)
   102ac:	29400044 	addi	r5,r5,1
   102b0:	003ff806 	br	10294 <__alt_data_end+0xffff0294>

  return count;
}
   102b4:	f800283a 	ret

000102b8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   102b8:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   102bc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   102c0:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   102c4:	dc000015 	stw	r16,0(sp)
   102c8:	dfc00115 	stw	ra,4(sp)
   102cc:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   102d0:	00104640 	call	10464 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   102d4:	10001026 	beq	r2,zero,10318 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   102d8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   102dc:	013999b4 	movhi	r4,58982
   102e0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   102e4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   102e8:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   102ec:	297fffc4 	addi	r5,r5,-1
   102f0:	283ffe1e 	bne	r5,zero,102ec <__alt_data_end+0xffff02ec>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   102f4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   102f8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   102fc:	18bffb16 	blt	r3,r2,102ec <__alt_data_end+0xffff02ec>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10300:	01400144 	movi	r5,5
   10304:	8009883a 	mov	r4,r16
   10308:	00105200 	call	10520 <__mulsi3>
   1030c:	10bfffc4 	addi	r2,r2,-1
   10310:	103ffe1e 	bne	r2,zero,1030c <__alt_data_end+0xffff030c>
   10314:	00000506 	br	1032c <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10318:	01400144 	movi	r5,5
   1031c:	8009883a 	mov	r4,r16
   10320:	00105200 	call	10520 <__mulsi3>
   10324:	10bfffc4 	addi	r2,r2,-1
   10328:	00bffe16 	blt	zero,r2,10324 <__alt_data_end+0xffff0324>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   1032c:	0005883a 	mov	r2,zero
   10330:	dfc00117 	ldw	ra,4(sp)
   10334:	dc000017 	ldw	r16,0(sp)
   10338:	dec00204 	addi	sp,sp,8
   1033c:	f800283a 	ret

00010340 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10340:	f800283a 	ret

00010344 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10344:	f800283a 	ret

00010348 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10348:	000170fa 	wrctl	ienable,zero
   1034c:	f800283a 	ret

00010350 <strlen>:
   10350:	2005883a 	mov	r2,r4
   10354:	10c00007 	ldb	r3,0(r2)
   10358:	18000226 	beq	r3,zero,10364 <strlen+0x14>
   1035c:	10800044 	addi	r2,r2,1
   10360:	003ffc06 	br	10354 <__alt_data_end+0xffff0354>
   10364:	1105c83a 	sub	r2,r2,r4
   10368:	f800283a 	ret

0001036c <__divsi3>:
   1036c:	20001b16 	blt	r4,zero,103dc <__divsi3+0x70>
   10370:	000f883a 	mov	r7,zero
   10374:	28001616 	blt	r5,zero,103d0 <__divsi3+0x64>
   10378:	200d883a 	mov	r6,r4
   1037c:	29001a2e 	bgeu	r5,r4,103e8 <__divsi3+0x7c>
   10380:	00800804 	movi	r2,32
   10384:	00c00044 	movi	r3,1
   10388:	00000106 	br	10390 <__divsi3+0x24>
   1038c:	10000d26 	beq	r2,zero,103c4 <__divsi3+0x58>
   10390:	294b883a 	add	r5,r5,r5
   10394:	10bfffc4 	addi	r2,r2,-1
   10398:	18c7883a 	add	r3,r3,r3
   1039c:	293ffb36 	bltu	r5,r4,1038c <__alt_data_end+0xffff038c>
   103a0:	0005883a 	mov	r2,zero
   103a4:	18000726 	beq	r3,zero,103c4 <__divsi3+0x58>
   103a8:	0005883a 	mov	r2,zero
   103ac:	31400236 	bltu	r6,r5,103b8 <__divsi3+0x4c>
   103b0:	314dc83a 	sub	r6,r6,r5
   103b4:	10c4b03a 	or	r2,r2,r3
   103b8:	1806d07a 	srli	r3,r3,1
   103bc:	280ad07a 	srli	r5,r5,1
   103c0:	183ffa1e 	bne	r3,zero,103ac <__alt_data_end+0xffff03ac>
   103c4:	38000126 	beq	r7,zero,103cc <__divsi3+0x60>
   103c8:	0085c83a 	sub	r2,zero,r2
   103cc:	f800283a 	ret
   103d0:	014bc83a 	sub	r5,zero,r5
   103d4:	39c0005c 	xori	r7,r7,1
   103d8:	003fe706 	br	10378 <__alt_data_end+0xffff0378>
   103dc:	0109c83a 	sub	r4,zero,r4
   103e0:	01c00044 	movi	r7,1
   103e4:	003fe306 	br	10374 <__alt_data_end+0xffff0374>
   103e8:	00c00044 	movi	r3,1
   103ec:	003fee06 	br	103a8 <__alt_data_end+0xffff03a8>

000103f0 <__modsi3>:
   103f0:	20001716 	blt	r4,zero,10450 <__modsi3+0x60>
   103f4:	000f883a 	mov	r7,zero
   103f8:	2005883a 	mov	r2,r4
   103fc:	28001216 	blt	r5,zero,10448 <__modsi3+0x58>
   10400:	2900162e 	bgeu	r5,r4,1045c <__modsi3+0x6c>
   10404:	01800804 	movi	r6,32
   10408:	00c00044 	movi	r3,1
   1040c:	00000106 	br	10414 <__modsi3+0x24>
   10410:	30000a26 	beq	r6,zero,1043c <__modsi3+0x4c>
   10414:	294b883a 	add	r5,r5,r5
   10418:	31bfffc4 	addi	r6,r6,-1
   1041c:	18c7883a 	add	r3,r3,r3
   10420:	293ffb36 	bltu	r5,r4,10410 <__alt_data_end+0xffff0410>
   10424:	18000526 	beq	r3,zero,1043c <__modsi3+0x4c>
   10428:	1806d07a 	srli	r3,r3,1
   1042c:	11400136 	bltu	r2,r5,10434 <__modsi3+0x44>
   10430:	1145c83a 	sub	r2,r2,r5
   10434:	280ad07a 	srli	r5,r5,1
   10438:	183ffb1e 	bne	r3,zero,10428 <__alt_data_end+0xffff0428>
   1043c:	38000126 	beq	r7,zero,10444 <__modsi3+0x54>
   10440:	0085c83a 	sub	r2,zero,r2
   10444:	f800283a 	ret
   10448:	014bc83a 	sub	r5,zero,r5
   1044c:	003fec06 	br	10400 <__alt_data_end+0xffff0400>
   10450:	0109c83a 	sub	r4,zero,r4
   10454:	01c00044 	movi	r7,1
   10458:	003fe706 	br	103f8 <__alt_data_end+0xffff03f8>
   1045c:	00c00044 	movi	r3,1
   10460:	003ff106 	br	10428 <__alt_data_end+0xffff0428>

00010464 <__udivsi3>:
   10464:	200d883a 	mov	r6,r4
   10468:	2900152e 	bgeu	r5,r4,104c0 <__udivsi3+0x5c>
   1046c:	28001416 	blt	r5,zero,104c0 <__udivsi3+0x5c>
   10470:	00800804 	movi	r2,32
   10474:	00c00044 	movi	r3,1
   10478:	00000206 	br	10484 <__udivsi3+0x20>
   1047c:	10000e26 	beq	r2,zero,104b8 <__udivsi3+0x54>
   10480:	28000516 	blt	r5,zero,10498 <__udivsi3+0x34>
   10484:	294b883a 	add	r5,r5,r5
   10488:	10bfffc4 	addi	r2,r2,-1
   1048c:	18c7883a 	add	r3,r3,r3
   10490:	293ffa36 	bltu	r5,r4,1047c <__alt_data_end+0xffff047c>
   10494:	18000826 	beq	r3,zero,104b8 <__udivsi3+0x54>
   10498:	0005883a 	mov	r2,zero
   1049c:	31400236 	bltu	r6,r5,104a8 <__udivsi3+0x44>
   104a0:	314dc83a 	sub	r6,r6,r5
   104a4:	10c4b03a 	or	r2,r2,r3
   104a8:	1806d07a 	srli	r3,r3,1
   104ac:	280ad07a 	srli	r5,r5,1
   104b0:	183ffa1e 	bne	r3,zero,1049c <__alt_data_end+0xffff049c>
   104b4:	f800283a 	ret
   104b8:	0005883a 	mov	r2,zero
   104bc:	f800283a 	ret
   104c0:	00c00044 	movi	r3,1
   104c4:	003ff406 	br	10498 <__alt_data_end+0xffff0498>

000104c8 <__umodsi3>:
   104c8:	2005883a 	mov	r2,r4
   104cc:	2900122e 	bgeu	r5,r4,10518 <__umodsi3+0x50>
   104d0:	28001116 	blt	r5,zero,10518 <__umodsi3+0x50>
   104d4:	01800804 	movi	r6,32
   104d8:	00c00044 	movi	r3,1
   104dc:	00000206 	br	104e8 <__umodsi3+0x20>
   104e0:	30000c26 	beq	r6,zero,10514 <__umodsi3+0x4c>
   104e4:	28000516 	blt	r5,zero,104fc <__umodsi3+0x34>
   104e8:	294b883a 	add	r5,r5,r5
   104ec:	31bfffc4 	addi	r6,r6,-1
   104f0:	18c7883a 	add	r3,r3,r3
   104f4:	293ffa36 	bltu	r5,r4,104e0 <__alt_data_end+0xffff04e0>
   104f8:	18000626 	beq	r3,zero,10514 <__umodsi3+0x4c>
   104fc:	1806d07a 	srli	r3,r3,1
   10500:	11400136 	bltu	r2,r5,10508 <__umodsi3+0x40>
   10504:	1145c83a 	sub	r2,r2,r5
   10508:	280ad07a 	srli	r5,r5,1
   1050c:	183ffb1e 	bne	r3,zero,104fc <__alt_data_end+0xffff04fc>
   10510:	f800283a 	ret
   10514:	f800283a 	ret
   10518:	00c00044 	movi	r3,1
   1051c:	003ff706 	br	104fc <__alt_data_end+0xffff04fc>

00010520 <__mulsi3>:
   10520:	0005883a 	mov	r2,zero
   10524:	20000726 	beq	r4,zero,10544 <__mulsi3+0x24>
   10528:	20c0004c 	andi	r3,r4,1
   1052c:	2008d07a 	srli	r4,r4,1
   10530:	18000126 	beq	r3,zero,10538 <__mulsi3+0x18>
   10534:	1145883a 	add	r2,r2,r5
   10538:	294b883a 	add	r5,r5,r5
   1053c:	203ffa1e 	bne	r4,zero,10528 <__alt_data_end+0xffff0528>
   10540:	f800283a 	ret
   10544:	f800283a 	ret
